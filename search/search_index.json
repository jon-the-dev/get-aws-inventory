{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#aws-inventory-scanner","title":"AWS Inventory Scanner","text":"<p>A comprehensive AWS resource inventory scanner that discovers and catalogs AWS resources across all regions in your account.</p>"},{"location":"#overview","title":"Overview","text":"<p>The AWS Inventory Scanner is a powerful tool designed to help you discover, catalog, and inventory AWS resources across your entire AWS account. It provides comprehensive coverage of 25+ AWS services and can scan all regions concurrently for fast and efficient resource discovery.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-region scanning: Scans all AWS regions by default, with option to specify specific regions</li> <li>Comprehensive coverage: Supports 25+ AWS services including EC2, S3, RDS, Lambda, and more</li> <li>Concurrent processing: Uses multithreading for fast, efficient scanning</li> <li>JSON output: Saves detailed resource information in structured JSON format</li> <li>CLI interface: Easy-to-use command-line interface with flexible options</li> <li>AWS profile support: Works with AWS CLI profiles and IAM roles</li> <li>Python API: Programmatic access for integration with other tools</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install aws-inventory-scanner\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code># Scan all regions with default settings\naws-inventory-scanner\n\n# Scan specific regions\naws-inventory-scanner --region us-east-1 --region us-west-2\n\n# Use specific AWS profile\naws-inventory-scanner --profile my-aws-profile\n</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Cloud Asset Management: Maintain an up-to-date inventory of all AWS resources</li> <li>Security Auditing: Identify resources that may not comply with security policies</li> <li>Cost Optimization: Discover unused or underutilized resources</li> <li>Compliance Reporting: Generate reports for compliance and governance requirements</li> <li>Migration Planning: Catalog existing resources before migration projects</li> <li>Disaster Recovery: Maintain resource inventories for DR planning</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>The scanner uses a multi-threaded architecture to efficiently scan multiple AWS services and regions concurrently. It leverages the AWS SDK for Python (boto3) and implements proper error handling and retry logic for reliable operation.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide - Detailed installation instructions</li> <li>Usage Guide - Comprehensive usage examples</li> <li>Supported Services - Complete list of supported AWS services</li> <li>API Reference - Python API documentation</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#api-reference","title":"API Reference","text":"<p>This page provides detailed documentation for the AWS Inventory Scanner Python API, including class definitions, methods, and configuration options.</p>"},{"location":"api/#awsinventoryscanner-class","title":"AWSInventoryScanner Class","text":"<p>The main class for performing AWS resource inventory scans.</p>"},{"location":"api/#constructor","title":"Constructor","text":"<pre><code>AWSInventoryScanner(regions=None, output_dir=\"./inventory\", workers=35)\n</code></pre> <p>Creates a new instance of the AWS Inventory Scanner.</p>"},{"location":"api/#parameters","title":"Parameters","text":"<ul> <li>regions (<code>list</code>, optional): List of AWS regions to scan. If <code>None</code>, scans all available regions.</li> <li>output_dir (<code>str</code>, optional): Directory to store inventory files. Defaults to <code>\"./inventory\"</code>.</li> <li>workers (<code>int</code>, optional): Number of concurrent workers for parallel processing. Defaults to <code>35</code>.</li> </ul>"},{"location":"api/#example","title":"Example","text":"<pre><code>from aws_inventory_scanner import AWSInventoryScanner\n\n# Default configuration\nscanner = AWSInventoryScanner()\n\n# Custom configuration\nscanner = AWSInventoryScanner(\n    regions=['us-east-1', 'us-west-2'],\n    output_dir='./my-inventory',\n    workers=25\n)\n</code></pre>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#scanprofile_namenone","title":"scan(profile_name=None)","text":"<p>Executes the AWS inventory scan across all configured services and regions.</p>"},{"location":"api/#parameters_1","title":"Parameters","text":"<ul> <li>profile_name (<code>str</code>, optional): AWS profile name to use for authentication. If <code>None</code>, uses default credentials.</li> </ul>"},{"location":"api/#returns","title":"Returns","text":"<ul> <li><code>None</code>: The method saves results to files and doesn't return data directly.</li> </ul>"},{"location":"api/#raises","title":"Raises","text":"<ul> <li><code>botocore.exceptions.BotoCoreError</code>: For AWS API-related errors</li> <li><code>Exception</code>: For general errors during scanning</li> </ul>"},{"location":"api/#example_1","title":"Example","text":"<pre><code># Scan with default credentials\nscanner.scan()\n\n# Scan with specific AWS profile\nscanner.scan(profile_name='production')\n</code></pre>"},{"location":"api/#get_all_regionscred_data","title":"get_all_regions(cred_data)","text":"<p>Retrieves all available AWS regions.</p>"},{"location":"api/#parameters_2","title":"Parameters","text":"<ul> <li>cred_data (<code>dict</code>): AWS credentials dictionary containing <code>accessKeyId</code>, <code>secretAccessKey</code>, and <code>sessionToken</code>.</li> </ul>"},{"location":"api/#returns_1","title":"Returns","text":"<ul> <li><code>list</code>: List of AWS region names.</li> </ul>"},{"location":"api/#example_2","title":"Example","text":"<pre><code># This method is typically used internally\nregions = scanner.get_all_regions(credentials)\nprint(regions)  # ['us-east-1', 'us-west-2', 'eu-west-1', ...]\n</code></pre>"},{"location":"api/#configuration-options","title":"Configuration Options","text":""},{"location":"api/#service-definitions","title":"Service Definitions","text":"<p>The scanner uses predefined service configurations that specify which AWS services to scan and which API methods to use.</p>"},{"location":"api/#paginated-services-all-regions","title":"Paginated Services (All Regions)","text":"<p>Services that support pagination and are scanned in all regions:</p> <pre><code>paginated_services = {\n    \"ec2\": [\n        (\"describe_instances\", \"Reservations\"),\n        (\"describe_security_groups\", \"SecurityGroups\"),\n        (\"describe_vpcs\", \"Vpcs\"),\n        # ... more methods\n    ],\n    \"s3\": [\n        (\"list_buckets\", \"Buckets\"),\n    ],\n    # ... more services\n}\n</code></pre>"},{"location":"api/#paginated-services-us-east-1-only","title":"Paginated Services (US-East-1 Only)","text":"<p>Global services that are only scanned in the US-East-1 region:</p> <pre><code>paginated_services_east = {\n    \"iam\": [\n        (\"list_users\", \"Users\"),\n        (\"list_roles\", \"Roles\"),\n        (\"list_groups\", \"Groups\"),\n    ],\n    \"route53domains\": [\n        (\"list_domains\", \"Domains\")\n    ],\n}\n</code></pre>"},{"location":"api/#non-paginated-services","title":"Non-Paginated Services","text":"<p>Services that don't support pagination:</p> <pre><code>non_paginated_services = {\n    \"apigatewayv2\": (\"get_apis\", \"Items\"),\n    \"config\": (\"describe_configuration_recorders\", \"ConfigurationRecorders\"),\n    # ... more services\n}\n</code></pre>"},{"location":"api/#aws-client-configuration","title":"AWS Client Configuration","text":"<p>The scanner uses a custom boto3 client configuration for optimal performance:</p> <pre><code>config = Config(\n    connect_timeout=5,           # Connection timeout in seconds\n    max_pool_connections=100,    # Maximum connection pool size\n    retries={\n        \"max_attempts\": 5,       # Maximum retry attempts\n        \"mode\": \"adaptive\"       # Adaptive retry mode\n    }\n)\n</code></pre>"},{"location":"api/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/#custom-service-configuration","title":"Custom Service Configuration","text":"<p>You can extend the scanner by modifying the service definitions:</p> <pre><code>from aws_inventory_scanner import AWSInventoryScanner\n\nclass CustomAWSScanner(AWSInventoryScanner):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        # Add custom service\n        self.paginated_services[\"custom-service\"] = [\n            (\"list_custom_resources\", \"Resources\")\n        ]\n\n        # Modify existing service\n        self.paginated_services[\"ec2\"].append(\n            (\"describe_custom_attribute\", \"CustomAttributes\")\n        )\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The scanner includes comprehensive error handling:</p> <pre><code>import logging\nfrom aws_inventory_scanner import AWSInventoryScanner\n\n# Enable debug logging\nlogging.basicConfig(level=logging.DEBUG)\n\nscanner = AWSInventoryScanner()\n\ntry:\n    scanner.scan(profile_name='my-profile')\nexcept Exception as e:\n    print(f\"Scan failed: {e}\")\n    # Handle error appropriately\n</code></pre>"},{"location":"api/#concurrent-processing","title":"Concurrent Processing","text":"<p>The scanner uses ThreadPoolExecutor for concurrent processing:</p> <pre><code>from concurrent.futures import ThreadPoolExecutor, as_completed\n\n# The scanner internally uses this pattern:\nwith ThreadPoolExecutor(max_workers=self.workers) as executor:\n    futures = []\n\n    # Submit tasks\n    for service, methods in self.paginated_services.items():\n        for region in regions:\n            for method, key in methods:\n                future = executor.submit(\n                    self.process_service_region,\n                    service, method, key, region, account_id, credentials\n                )\n                futures.append(future)\n\n    # Process results\n    for future in as_completed(futures):\n        result = future.result()\n        # Handle result\n</code></pre>"},{"location":"api/#internal-methods","title":"Internal Methods","text":""},{"location":"api/#process_service_regionservice-method-key-region-aws_acct_id-cred_data","title":"process_service_region(service, method, key, region, aws_acct_id, cred_data)","text":"<p>Processes a single service in a specific region.</p>"},{"location":"api/#parameters_3","title":"Parameters","text":"<ul> <li>service (<code>str</code>): AWS service name</li> <li>method (<code>str</code>): API method to call</li> <li>key (<code>str</code>): Response key containing resources</li> <li>region (<code>str</code>): AWS region</li> <li>aws_acct_id (<code>str</code>): AWS account ID</li> <li>cred_data (<code>dict</code>): AWS credentials</li> </ul>"},{"location":"api/#returns_2","title":"Returns","text":"<ul> <li><code>tuple</code>: (service_name, resources_list)</li> </ul>"},{"location":"api/#paginate_and_collectclient-method_name-key","title":"paginate_and_collect(client, method_name, key)","text":"<p>Handles paginated API calls.</p>"},{"location":"api/#parameters_4","title":"Parameters","text":"<ul> <li>client: Boto3 client instance</li> <li>method_name (<code>str</code>): API method name</li> <li>key (<code>str</code>): Response key containing resources</li> </ul>"},{"location":"api/#returns_3","title":"Returns","text":"<ul> <li><code>list</code>: Collected resources from all pages</li> </ul>"},{"location":"api/#handle_non_paginated_serviceclient-method_name-key-paramsnone","title":"handle_non_paginated_service(client, method_name, key, params=None)","text":"<p>Handles non-paginated API calls with manual pagination.</p>"},{"location":"api/#parameters_5","title":"Parameters","text":"<ul> <li>client: Boto3 client instance</li> <li>method_name (<code>str</code>): API method name</li> <li>key (<code>str</code>): Response key containing resources</li> <li>params (<code>dict</code>, optional): Additional parameters</li> </ul>"},{"location":"api/#returns_4","title":"Returns","text":"<ul> <li><code>list</code>: Collected resources</li> </ul>"},{"location":"api/#write_to_filedata-file_name","title":"write_to_file(data, file_name)","text":"<p>Writes resource data to a JSON file.</p>"},{"location":"api/#parameters_6","title":"Parameters","text":"<ul> <li>data: Data to write</li> <li>file_name (<code>str</code>): Output file path</li> </ul>"},{"location":"api/#integration-examples","title":"Integration Examples","text":""},{"location":"api/#custom-processing-pipeline","title":"Custom Processing Pipeline","text":"<pre><code>import json\nimport os\nfrom aws_inventory_scanner import AWSInventoryScanner\n\nclass InventoryProcessor:\n    def __init__(self, scanner_config=None):\n        self.scanner = AWSInventoryScanner(**(scanner_config or {}))\n\n    def scan_and_process(self, profile_name=None):\n        \"\"\"Scan AWS resources and process results.\"\"\"\n\n        # Run the scan\n        self.scanner.scan(profile_name=profile_name)\n\n        # Process results\n        return self.process_results()\n\n    def process_results(self):\n        \"\"\"Process scan results.\"\"\"\n        results = {}\n\n        for filename in os.listdir(self.scanner.output_dir):\n            if not filename.endswith('.json'):\n                continue\n\n            filepath = os.path.join(self.scanner.output_dir, filename)\n            with open(filepath, 'r') as f:\n                data = json.load(f)\n\n            # Extract service and region from filename\n            parts = filename.replace('.json', '').split('-')\n            service = parts[1]\n            region = parts[2]\n\n            if service not in results:\n                results[service] = {}\n            if region not in results[service]:\n                results[service][region] = []\n\n            results[service][region].extend(data)\n\n        return results\n\n# Usage\nprocessor = InventoryProcessor({\n    'regions': ['us-east-1', 'us-west-2'],\n    'workers': 20\n})\n\nresults = processor.scan_and_process('production')\n</code></pre>"},{"location":"api/#database-integration","title":"Database Integration","text":"<pre><code>import json\nimport sqlite3\nfrom aws_inventory_scanner import AWSInventoryScanner\n\nclass DatabaseInventory:\n    def __init__(self, db_path='inventory.db'):\n        self.db_path = db_path\n        self.scanner = AWSInventoryScanner()\n        self.init_database()\n\n    def init_database(self):\n        \"\"\"Initialize database schema.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS resources (\n                id INTEGER PRIMARY KEY,\n                account_id TEXT,\n                service TEXT,\n                region TEXT,\n                resource_type TEXT,\n                resource_id TEXT,\n                data TEXT,\n                scan_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n        ''')\n\n        conn.commit()\n        conn.close()\n\n    def scan_to_database(self, profile_name=None):\n        \"\"\"Scan AWS resources and store in database.\"\"\"\n\n        # Run scan\n        self.scanner.scan(profile_name=profile_name)\n\n        # Import to database\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        for filename in os.listdir(self.scanner.output_dir):\n            if not filename.endswith('.json'):\n                continue\n\n            # Parse filename\n            parts = filename.replace('.json', '').split('-')\n            account_id = parts[0]\n            service = parts[1]\n            region = parts[2]\n            resource_type = parts[4]\n\n            # Load data\n            filepath = os.path.join(self.scanner.output_dir, filename)\n            with open(filepath, 'r') as f:\n                data = json.load(f)\n\n            # Insert resources\n            for resource in data:\n                resource_id = self.extract_resource_id(service, resource)\n\n                cursor.execute('''\n                    INSERT INTO resources \n                    (account_id, service, region, resource_type, resource_id, data)\n                    VALUES (?, ?, ?, ?, ?, ?)\n                ''', (account_id, service, region, resource_type, \n                      resource_id, json.dumps(resource)))\n\n        conn.commit()\n        conn.close()\n\n    def extract_resource_id(self, service, resource):\n        \"\"\"Extract resource ID based on service type.\"\"\"\n        id_mappings = {\n            'ec2': lambda r: r.get('InstanceId', r.get('VolumeId', r.get('GroupId'))),\n            's3': lambda r: r.get('Name'),\n            'rds': lambda r: r.get('DBInstanceIdentifier', r.get('DBClusterIdentifier')),\n            'lambda': lambda r: r.get('FunctionName'),\n        }\n\n        extractor = id_mappings.get(service, lambda r: str(hash(str(r)))[:16])\n        return extractor(resource)\n\n# Usage\ndb_inventory = DatabaseInventory()\ndb_inventory.scan_to_database('production')\n</code></pre>"},{"location":"api/#error-handling-and-logging","title":"Error Handling and Logging","text":""},{"location":"api/#custom-logging-configuration","title":"Custom Logging Configuration","text":"<pre><code>import logging\nfrom aws_inventory_scanner import AWSInventoryScanner\n\n# Configure custom logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('inventory_scan.log'),\n        logging.StreamHandler()\n    ]\n)\n\nscanner = AWSInventoryScanner()\nscanner.scan()\n</code></pre>"},{"location":"api/#exception-handling","title":"Exception Handling","text":"<pre><code>from aws_inventory_scanner import AWSInventoryScanner\nimport botocore.exceptions\n\nscanner = AWSInventoryScanner()\n\ntry:\n    scanner.scan(profile_name='production')\nexcept botocore.exceptions.NoCredentialsError:\n    print(\"AWS credentials not found\")\nexcept botocore.exceptions.ClientError as e:\n    print(f\"AWS API error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api/#performance-tuning","title":"Performance Tuning","text":""},{"location":"api/#worker-configuration","title":"Worker Configuration","text":"<pre><code>import os\nfrom aws_inventory_scanner import AWSInventoryScanner\n\n# Adjust workers based on system resources\ncpu_count = os.cpu_count()\noptimal_workers = min(cpu_count * 4, 50)  # Cap at 50\n\nscanner = AWSInventoryScanner(workers=optimal_workers)\n</code></pre>"},{"location":"api/#memory-management","title":"Memory Management","text":"<pre><code>import gc\nfrom aws_inventory_scanner import AWSInventoryScanner\n\nclass MemoryEfficientScanner(AWSInventoryScanner):\n    def write_to_file(self, data, file_name):\n        \"\"\"Override to add memory cleanup.\"\"\"\n        super().write_to_file(data, file_name)\n\n        # Force garbage collection after large writes\n        if len(str(data)) &gt; 1000000:  # 1MB threshold\n            gc.collect()\n</code></pre> <p>This API reference provides comprehensive documentation for integrating and extending the AWS Inventory Scanner in your applications.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#examples","title":"Examples","text":"<p>This page provides practical examples of using the AWS Inventory Scanner for various use cases and scenarios.</p>"},{"location":"examples/#basic-usage-examples","title":"Basic Usage Examples","text":""},{"location":"examples/#simple-full-account-scan","title":"Simple Full Account Scan","text":"<pre><code># Scan all regions and services with default settings\naws-inventory-scanner\n</code></pre> <p>This will: - Scan all AWS regions - Use default AWS credentials - Save results to <code>./inventory/</code> directory - Use 35 concurrent workers</p>"},{"location":"examples/#regional-scan","title":"Regional Scan","text":"<pre><code># Scan specific regions only\naws-inventory-scanner --region us-east-1 --region us-west-2\n</code></pre>"},{"location":"examples/#profile-based-scan","title":"Profile-Based Scan","text":"<pre><code># Use a specific AWS profile\naws-inventory-scanner --profile production --verbose\n</code></pre>"},{"location":"examples/#advanced-cli-examples","title":"Advanced CLI Examples","text":""},{"location":"examples/#multi-environment-scanning","title":"Multi-Environment Scanning","text":"<pre><code>#!/bin/bash\n# Script to scan multiple AWS environments\n\nENVIRONMENTS=(\"dev\" \"staging\" \"production\")\nREGIONS=(\"us-east-1\" \"us-west-2\" \"eu-west-1\")\n\nfor env in \"${ENVIRONMENTS[@]}\"; do\n    echo \"Scanning $env environment...\"\n\n    # Create environment-specific output directory\n    output_dir=\"./inventory-${env}-$(date +%Y%m%d)\"\n\n    # Scan with environment-specific profile\n    aws-inventory-scanner \\\n        --profile \"$env\" \\\n        --output-dir \"$output_dir\" \\\n        --region us-east-1 \\\n        --region us-west-2 \\\n        --workers 25 \\\n        --verbose\n\n    echo \"Completed $env scan. Results in: $output_dir\"\ndone\n</code></pre>"},{"location":"examples/#scheduled-scanning","title":"Scheduled Scanning","text":"<pre><code>#!/bin/bash\n# Daily inventory scan script for cron\n\n# Set up environment\nexport PATH=\"/usr/local/bin:$PATH\"\ncd /home/user/aws-inventory\n\n# Create timestamped directory\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nOUTPUT_DIR=\"./daily-scans/scan_$TIMESTAMP\"\n\n# Run scan\naws-inventory-scanner \\\n    --profile production \\\n    --output-dir \"$OUTPUT_DIR\" \\\n    --workers 30 \\\n    --verbose &gt; \"scan_$TIMESTAMP.log\" 2&gt;&amp;1\n\n# Compress old scans (keep last 7 days)\nfind ./daily-scans -name \"scan_*\" -type d -mtime +7 -exec tar -czf {}.tar.gz {} \\; -exec rm -rf {} \\;\n\n# Send notification\nif [ $? -eq 0 ]; then\n    echo \"AWS inventory scan completed successfully\" | mail -s \"Inventory Scan Success\" admin@company.com\nelse\n    echo \"AWS inventory scan failed. Check logs.\" | mail -s \"Inventory Scan Failed\" admin@company.com\nfi\n</code></pre> <p>Add to crontab: </p><pre><code># Run daily at 2 AM\n0 2 * * * /path/to/inventory-scan.sh\n</code></pre>"},{"location":"examples/#python-api-examples","title":"Python API Examples","text":""},{"location":"examples/#basic-python-usage","title":"Basic Python Usage","text":"<pre><code>from aws_inventory_scanner import AWSInventoryScanner\n\n# Simple scan\nscanner = AWSInventoryScanner()\nscanner.scan()\n\nprint(\"Scan completed. Check ./inventory/ directory for results.\")\n</code></pre>"},{"location":"examples/#custom-configuration","title":"Custom Configuration","text":"<pre><code>from aws_inventory_scanner import AWSInventoryScanner\nimport os\nfrom datetime import datetime\n\n# Create timestamped output directory\ntimestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\noutput_dir = f\"./scans/inventory_{timestamp}\"\n\n# Configure scanner\nscanner = AWSInventoryScanner(\n    regions=['us-east-1', 'us-west-2', 'eu-west-1'],\n    output_dir=output_dir,\n    workers=25\n)\n\n# Run scan with specific profile\ntry:\n    scanner.scan(profile_name='production')\n    print(f\"Scan completed successfully. Results in: {output_dir}\")\nexcept Exception as e:\n    print(f\"Scan failed: {e}\")\n</code></pre>"},{"location":"examples/#multi-account-scanning","title":"Multi-Account Scanning","text":"<pre><code>from aws_inventory_scanner import AWSInventoryScanner\nimport os\n\ndef scan_multiple_accounts():\n    \"\"\"Scan multiple AWS accounts using different profiles.\"\"\"\n\n    accounts = {\n        'production': ['us-east-1', 'us-west-2'],\n        'development': ['us-east-1'],\n        'staging': ['us-east-1', 'eu-west-1']\n    }\n\n    results = {}\n\n    for profile, regions in accounts.items():\n        print(f\"Scanning account: {profile}\")\n\n        output_dir = f\"./inventory-{profile}\"\n        scanner = AWSInventoryScanner(\n            regions=regions,\n            output_dir=output_dir,\n            workers=20\n        )\n\n        try:\n            scanner.scan(profile_name=profile)\n            results[profile] = output_dir\n            print(f\"\u2713 {profile} scan completed\")\n        except Exception as e:\n            print(f\"\u2717 {profile} scan failed: {e}\")\n            results[profile] = None\n\n    return results\n\n# Run multi-account scan\nscan_results = scan_multiple_accounts()\nfor account, result_dir in scan_results.items():\n    if result_dir:\n        print(f\"{account}: {result_dir}\")\n    else:\n        print(f\"{account}: FAILED\")\n</code></pre>"},{"location":"examples/#data-processing-examples","title":"Data Processing Examples","text":""},{"location":"examples/#resource-counting-and-analysis","title":"Resource Counting and Analysis","text":"<pre><code>import json\nimport os\nfrom collections import defaultdict, Counter\n\ndef analyze_inventory(inventory_dir):\n    \"\"\"Comprehensive analysis of AWS inventory.\"\"\"\n\n    # Initialize counters\n    resource_counts = defaultdict(int)\n    service_regions = defaultdict(set)\n    account_resources = defaultdict(lambda: defaultdict(int))\n\n    # Process all inventory files\n    for filename in os.listdir(inventory_dir):\n        if not filename.endswith('.json'):\n            continue\n\n        # Parse filename components\n        parts = filename.replace('.json', '').split('-')\n        if len(parts) &lt; 5:\n            continue\n\n        account_id = parts[0]\n        service = parts[1]\n        region = parts[2]\n        method = parts[3]\n        key = parts[4]\n\n        # Load resource data\n        filepath = os.path.join(inventory_dir, filename)\n        try:\n            with open(filepath, 'r') as f:\n                data = json.load(f)\n                resource_count = len(data)\n        except (json.JSONDecodeError, IOError):\n            continue\n\n        # Update counters\n        resource_counts[service] += resource_count\n        service_regions[service].add(region)\n        account_resources[account_id][service] += resource_count\n\n    # Generate report\n    print(\"AWS Inventory Analysis Report\")\n    print(\"=\" * 50)\n\n    print(f\"\\nTotal Services Scanned: {len(resource_counts)}\")\n    print(f\"Total Regions Covered: {len(set().union(*service_regions.values()))}\")\n    print(f\"Total Accounts: {len(account_resources)}\")\n\n    print(\"\\nTop 10 Services by Resource Count:\")\n    print(\"-\" * 40)\n    for service, count in Counter(resource_counts).most_common(10):\n        regions = len(service_regions[service])\n        print(f\"{service:20} {count:6} resources ({regions} regions)\")\n\n    print(\"\\nResources by Account:\")\n    print(\"-\" * 30)\n    for account_id, services in account_resources.items():\n        total = sum(services.values())\n        print(f\"Account {account_id}: {total} total resources\")\n        for service, count in sorted(services.items(), key=lambda x: x[1], reverse=True)[:5]:\n            print(f\"  {service:15} {count:6}\")\n\n    return {\n        'resource_counts': dict(resource_counts),\n        'service_regions': {k: list(v) for k, v in service_regions.items()},\n        'account_resources': dict(account_resources)\n    }\n\n# Usage\nanalysis = analyze_inventory('./inventory')\n</code></pre>"},{"location":"examples/#security-analysis-example","title":"Security Analysis Example","text":"<pre><code>import json\nimport os\n\ndef security_analysis(inventory_dir):\n    \"\"\"Analyze security-related resources.\"\"\"\n\n    security_findings = {\n        'public_instances': [],\n        'open_security_groups': [],\n        'unencrypted_volumes': [],\n        'public_s3_buckets': [],\n        'unused_security_groups': []\n    }\n\n    # Analyze EC2 instances\n    for filename in os.listdir(inventory_dir):\n        if 'ec2' in filename and 'describe_instances' in filename:\n            filepath = os.path.join(inventory_dir, filename)\n            with open(filepath, 'r') as f:\n                reservations = json.load(f)\n\n            for reservation in reservations:\n                for instance in reservation.get('Instances', []):\n                    # Check for public instances\n                    if instance.get('PublicIpAddress'):\n                        security_findings['public_instances'].append({\n                            'instance_id': instance['InstanceId'],\n                            'public_ip': instance['PublicIpAddress'],\n                            'state': instance['State']['Name']\n                        })\n\n    # Analyze Security Groups\n    for filename in os.listdir(inventory_dir):\n        if 'ec2' in filename and 'describe_security_groups' in filename:\n            filepath = os.path.join(inventory_dir, filename)\n            with open(filepath, 'r') as f:\n                security_groups = json.load(f)\n\n            for sg in security_groups:\n                # Check for overly permissive rules\n                for rule in sg.get('IpPermissions', []):\n                    for ip_range in rule.get('IpRanges', []):\n                        if ip_range.get('CidrIp') == '0.0.0.0/0':\n                            security_findings['open_security_groups'].append({\n                                'group_id': sg['GroupId'],\n                                'group_name': sg.get('GroupName', ''),\n                                'protocol': rule.get('IpProtocol'),\n                                'port_range': f\"{rule.get('FromPort', 'All')}-{rule.get('ToPort', 'All')}\"\n                            })\n\n    # Generate security report\n    print(\"Security Analysis Report\")\n    print(\"=\" * 30)\n\n    print(f\"\\nPublic EC2 Instances: {len(security_findings['public_instances'])}\")\n    for instance in security_findings['public_instances'][:5]:  # Show first 5\n        print(f\"  {instance['instance_id']} - {instance['public_ip']} ({instance['state']})\")\n\n    print(f\"\\nOpen Security Groups: {len(security_findings['open_security_groups'])}\")\n    for sg in security_findings['open_security_groups'][:5]:  # Show first 5\n        print(f\"  {sg['group_id']} - {sg['protocol']}:{sg['port_range']}\")\n\n    return security_findings\n\n# Usage\nfindings = security_analysis('./inventory')\n</code></pre>"},{"location":"examples/#cost-optimization-analysis","title":"Cost Optimization Analysis","text":"<pre><code>import json\nimport os\nfrom datetime import datetime, timedelta\n\ndef cost_optimization_analysis(inventory_dir):\n    \"\"\"Identify potential cost optimization opportunities.\"\"\"\n\n    opportunities = {\n        'stopped_instances': [],\n        'unattached_volumes': [],\n        'old_snapshots': [],\n        'unused_elastic_ips': [],\n        'oversized_instances': []\n    }\n\n    # Analyze EC2 instances\n    for filename in os.listdir(inventory_dir):\n        if 'ec2' in filename and 'describe_instances' in filename:\n            filepath = os.path.join(inventory_dir, filename)\n            with open(filepath, 'r') as f:\n                reservations = json.load(f)\n\n            for reservation in reservations:\n                for instance in reservation.get('Instances', []):\n                    # Find stopped instances\n                    if instance['State']['Name'] == 'stopped':\n                        launch_time = datetime.fromisoformat(\n                            instance['LaunchTime'].replace('Z', '+00:00')\n                        )\n                        stopped_days = (datetime.now(launch_time.tzinfo) - launch_time).days\n\n                        opportunities['stopped_instances'].append({\n                            'instance_id': instance['InstanceId'],\n                            'instance_type': instance['InstanceType'],\n                            'stopped_days': stopped_days,\n                            'launch_time': instance['LaunchTime']\n                        })\n\n    # Analyze EBS volumes\n    for filename in os.listdir(inventory_dir):\n        if 'ec2' in filename and 'describe_volumes' in filename:\n            filepath = os.path.join(inventory_dir, filename)\n            with open(filepath, 'r') as f:\n                volumes = json.load(f)\n\n            for volume in volumes:\n                # Find unattached volumes\n                if volume['State'] == 'available':\n                    opportunities['unattached_volumes'].append({\n                        'volume_id': volume['VolumeId'],\n                        'size': volume['Size'],\n                        'volume_type': volume['VolumeType'],\n                        'create_time': volume['CreateTime']\n                    })\n\n    # Analyze Elastic IPs\n    for filename in os.listdir(inventory_dir):\n        if 'ec2' in filename and 'describe_addresses' in filename:\n            filepath = os.path.join(inventory_dir, filename)\n            with open(filepath, 'r') as f:\n                addresses = json.load(f)\n\n            for address in addresses:\n                # Find unassociated Elastic IPs\n                if 'InstanceId' not in address and 'NetworkInterfaceId' not in address:\n                    opportunities['unused_elastic_ips'].append({\n                        'allocation_id': address.get('AllocationId'),\n                        'public_ip': address['PublicIp'],\n                        'domain': address.get('Domain', 'classic')\n                    })\n\n    # Generate cost optimization report\n    print(\"Cost Optimization Report\")\n    print(\"=\" * 30)\n\n    total_savings_potential = 0\n\n    print(f\"\\nStopped Instances: {len(opportunities['stopped_instances'])}\")\n    for instance in opportunities['stopped_instances'][:5]:\n        print(f\"  {instance['instance_id']} ({instance['instance_type']}) - stopped {instance['stopped_days']} days\")\n\n    print(f\"\\nUnattached EBS Volumes: {len(opportunities['unattached_volumes'])}\")\n    total_unattached_gb = sum(vol['size'] for vol in opportunities['unattached_volumes'])\n    estimated_monthly_cost = total_unattached_gb * 0.10  # Rough estimate\n    print(f\"  Total size: {total_unattached_gb} GB\")\n    print(f\"  Estimated monthly cost: ${estimated_monthly_cost:.2f}\")\n\n    print(f\"\\nUnused Elastic IPs: {len(opportunities['unused_elastic_ips'])}\")\n    eip_monthly_cost = len(opportunities['unused_elastic_ips']) * 3.65  # $0.005/hour\n    print(f\"  Estimated monthly cost: ${eip_monthly_cost:.2f}\")\n\n    return opportunities\n\n# Usage\ncost_opportunities = cost_optimization_analysis('./inventory')\n</code></pre>"},{"location":"examples/#integration-examples","title":"Integration Examples","text":""},{"location":"examples/#slack-notification-integration","title":"Slack Notification Integration","text":"<pre><code>import json\nimport requests\nfrom aws_inventory_scanner import AWSInventoryScanner\n\ndef scan_and_notify_slack(webhook_url, profile_name=None):\n    \"\"\"Scan AWS resources and send summary to Slack.\"\"\"\n\n    scanner = AWSInventoryScanner()\n\n    try:\n        # Run scan\n        scanner.scan(profile_name=profile_name)\n\n        # Analyze results\n        resource_count = 0\n        service_count = 0\n\n        for filename in os.listdir(scanner.output_dir):\n            if filename.endswith('.json'):\n                service_count += 1\n                filepath = os.path.join(scanner.output_dir, filename)\n                with open(filepath, 'r') as f:\n                    data = json.load(f)\n                    resource_count += len(data)\n\n        # Send Slack notification\n        message = {\n            \"text\": \"AWS Inventory Scan Completed\",\n            \"attachments\": [\n                {\n                    \"color\": \"good\",\n                    \"fields\": [\n                        {\n                            \"title\": \"Total Resources\",\n                            \"value\": str(resource_count),\n                            \"short\": True\n                        },\n                        {\n                            \"title\": \"Services Scanned\",\n                            \"value\": str(service_count),\n                            \"short\": True\n                        },\n                        {\n                            \"title\": \"Profile\",\n                            \"value\": profile_name or \"default\",\n                            \"short\": True\n                        }\n                    ]\n                }\n            ]\n        }\n\n        response = requests.post(webhook_url, json=message)\n        response.raise_for_status()\n\n        print(\"Scan completed and Slack notification sent\")\n\n    except Exception as e:\n        # Send error notification\n        error_message = {\n            \"text\": \"AWS Inventory Scan Failed\",\n            \"attachments\": [\n                {\n                    \"color\": \"danger\",\n                    \"fields\": [\n                        {\n                            \"title\": \"Error\",\n                            \"value\": str(e),\n                            \"short\": False\n                        }\n                    ]\n                }\n            ]\n        }\n\n        requests.post(webhook_url, json=error_message)\n        raise\n\n# Usage\nwebhook_url = \"https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\"\nscan_and_notify_slack(webhook_url, 'production')\n</code></pre>"},{"location":"examples/#database-storage-example","title":"Database Storage Example","text":"<pre><code>import json\nimport sqlite3\nimport os\nfrom datetime import datetime\nfrom aws_inventory_scanner import AWSInventoryScanner\n\nclass InventoryDatabase:\n    def __init__(self, db_path='aws_inventory.db'):\n        self.db_path = db_path\n        self.init_database()\n\n    def init_database(self):\n        \"\"\"Initialize the database schema.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        # Create tables\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS scans (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                scan_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                profile_name TEXT,\n                total_resources INTEGER,\n                total_services INTEGER\n            )\n        ''')\n\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS resources (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                scan_id INTEGER,\n                account_id TEXT,\n                service TEXT,\n                region TEXT,\n                resource_type TEXT,\n                resource_id TEXT,\n                resource_data TEXT,\n                FOREIGN KEY (scan_id) REFERENCES scans (id)\n            )\n        ''')\n\n        conn.commit()\n        conn.close()\n\n    def store_scan_results(self, inventory_dir, profile_name=None):\n        \"\"\"Store scan results in database.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        # Create scan record\n        cursor.execute(\n            'INSERT INTO scans (profile_name, total_resources, total_services) VALUES (?, 0, 0)',\n            (profile_name,)\n        )\n        scan_id = cursor.lastrowid\n\n        total_resources = 0\n        total_services = 0\n\n        # Process inventory files\n        for filename in os.listdir(inventory_dir):\n            if not filename.endswith('.json'):\n                continue\n\n            total_services += 1\n\n            # Parse filename\n            parts = filename.replace('.json', '').split('-')\n            account_id = parts[0]\n            service = parts[1]\n            region = parts[2]\n            resource_type = parts[4]\n\n            # Load and store resources\n            filepath = os.path.join(inventory_dir, filename)\n            with open(filepath, 'r') as f:\n                resources = json.load(f)\n\n            for resource in resources:\n                total_resources += 1\n                resource_id = self.extract_resource_id(service, resource)\n\n                cursor.execute('''\n                    INSERT INTO resources \n                    (scan_id, account_id, service, region, resource_type, resource_id, resource_data)\n                    VALUES (?, ?, ?, ?, ?, ?, ?)\n                ''', (scan_id, account_id, service, region, resource_type, \n                      resource_id, json.dumps(resource)))\n\n        # Update scan totals\n        cursor.execute(\n            'UPDATE scans SET total_resources = ?, total_services = ? WHERE id = ?',\n            (total_resources, total_services, scan_id)\n        )\n\n        conn.commit()\n        conn.close()\n\n        return scan_id\n\n    def extract_resource_id(self, service, resource):\n        \"\"\"Extract resource ID based on service type.\"\"\"\n        id_fields = {\n            'ec2': ['InstanceId', 'VolumeId', 'GroupId', 'VpcId'],\n            's3': ['Name'],\n            'rds': ['DBInstanceIdentifier', 'DBClusterIdentifier'],\n            'lambda': ['FunctionName'],\n            'iam': ['UserName', 'RoleName', 'GroupName']\n        }\n\n        fields = id_fields.get(service, [])\n        for field in fields:\n            if field in resource:\n                return resource[field]\n\n        return f\"unknown-{hash(str(resource)) % 10000}\"\n\n    def get_scan_history(self, limit=10):\n        \"\"\"Get recent scan history.\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n\n        cursor.execute('''\n            SELECT id, scan_date, profile_name, total_resources, total_services\n            FROM scans\n            ORDER BY scan_date DESC\n            LIMIT ?\n        ''', (limit,))\n\n        results = cursor.fetchall()\n        conn.close()\n\n        return results\n\n# Usage example\ndef scan_to_database():\n    \"\"\"Complete example of scanning and storing in database.\"\"\"\n\n    # Initialize database\n    db = InventoryDatabase()\n\n    # Run scan\n    scanner = AWSInventoryScanner(\n        regions=['us-east-1', 'us-west-2'],\n        output_dir='./temp-inventory'\n    )\n\n    profile_name = 'production'\n    scanner.scan(profile_name=profile_name)\n\n    # Store in database\n    scan_id = db.store_scan_results('./temp-inventory', profile_name)\n\n    print(f\"Scan completed and stored with ID: {scan_id}\")\n\n    # Show recent scans\n    print(\"\\nRecent scans:\")\n    for scan in db.get_scan_history(5):\n        print(f\"  {scan[1]} - {scan[2]} - {scan[3]} resources, {scan[4]} services\")\n\n    # Cleanup temporary files\n    import shutil\n    shutil.rmtree('./temp-inventory')\n\n# Run the example\nscan_to_database()\n</code></pre>"},{"location":"examples/#monitoring-and-alerting-examples","title":"Monitoring and Alerting Examples","text":""},{"location":"examples/#cloudwatch-metrics-integration","title":"CloudWatch Metrics Integration","text":"<pre><code>import boto3\nimport json\nimport os\nfrom aws_inventory_scanner import AWSInventoryScanner\nfrom datetime import datetime\n\ndef scan_with_cloudwatch_metrics(profile_name=None):\n    \"\"\"Scan AWS resources and send metrics to CloudWatch.\"\"\"\n\n    # Initialize CloudWatch client\n    session = boto3.Session(profile_name=profile_name)\n    cloudwatch = session.client('cloudwatch')\n\n    # Run scan\n    scanner = AWSInventoryScanner()\n    start_time = datetime.now()\n\n    try:\n        scanner.scan(profile_name=profile_name)\n        end_time = datetime.now()\n        scan_duration = (end_time - start_time).total_seconds()\n\n        # Analyze results\n        metrics = analyze_scan_results(scanner.output_dir)\n\n        # Send metrics to CloudWatch\n        cloudwatch.put_metric_data(\n            Namespace='AWS/InventoryScanner',\n            MetricData=[\n                {\n                    'MetricName': 'ScanDuration',\n                    'Value': scan_duration,\n                    'Unit': 'Seconds',\n                    'Dimensions': [\n                        {\n                            'Name': 'Profile',\n                            'Value': profile_name or 'default'\n                        }\n                    ]\n                },\n                {\n                    'MetricName': 'TotalResources',\n                    'Value': metrics['total_resources'],\n                    'Unit': 'Count',\n                    'Dimensions': [\n                        {\n                            'Name': 'Profile',\n                            'Value': profile_name or 'default'\n                        }\n                    ]\n                },\n                {\n                    'MetricName': 'ServicesScanned',\n                    'Value': metrics['services_scanned'],\n                    'Unit': 'Count',\n                    'Dimensions': [\n                        {\n                            'Name': 'Profile',\n                            'Value': profile_name or 'default'\n                        }\n                    ]\n                }\n            ]\n        )\n\n        print(f\"Scan completed in {scan_duration:.2f} seconds\")\n        print(f\"Metrics sent to CloudWatch\")\n\n    except Exception as e:\n        # Send failure metric\n        cloudwatch.put_metric_data(\n            Namespace='AWS/InventoryScanner',\n            MetricData=[\n                {\n                    'MetricName': 'ScanFailures',\n                    'Value': 1,\n                    'Unit': 'Count',\n                    'Dimensions': [\n                        {\n                            'Name': 'Profile',\n                            'Value': profile_name or 'default'\n                        }\n                    ]\n                }\n            ]\n        )\n        raise\n\ndef analyze_scan_results(inventory_dir):\n    \"\"\"Analyze scan results and return metrics.\"\"\"\n    total_resources = 0\n    services_scanned = 0\n\n    for filename in os.listdir(inventory_dir):\n        if filename.endswith('.json'):\n            services_scanned += 1\n            filepath = os.path.join(inventory_dir, filename)\n            with open(filepath, 'r') as f:\n                data = json.load(f)\n                total_resources += len(data)\n\n    return {\n        'total_resources': total_resources,\n        'services_scanned': services_scanned\n    }\n\n# Usage\nscan_with_cloudwatch_metrics('production')\n</code></pre> <p>These examples demonstrate the flexibility and power of the AWS Inventory Scanner for various use cases, from simple resource discovery to complex integration scenarios.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>AWS credentials configured (via AWS CLI, environment variables, or IAM roles)</li> <li>Appropriate AWS permissions to read resources</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#from-pypi-recommended","title":"From PyPI (Recommended)","text":"<p>The easiest way to install the AWS Inventory Scanner is from PyPI:</p> <pre><code>pip install aws-inventory-scanner\n</code></pre>"},{"location":"installation/#from-source","title":"From Source","text":"<p>If you want to install from source or contribute to the project:</p> <pre><code>git clone https://github.com/yourusername/aws-inventory-scanner.git\ncd aws-inventory-scanner\npip install -e .\n</code></pre>"},{"location":"installation/#using-virtual-environment-recommended","title":"Using Virtual Environment (Recommended)","text":"<p>It's recommended to use a virtual environment to avoid conflicts with other Python packages:</p> <pre><code># Create virtual environment\npython -m venv aws-scanner-env\n\n# Activate virtual environment\n# On Linux/macOS:\nsource aws-scanner-env/bin/activate\n# On Windows:\naws-scanner-env\\Scripts\\activate\n\n# Install the scanner\npip install aws-inventory-scanner\n</code></pre>"},{"location":"installation/#aws-credentials-setup","title":"AWS Credentials Setup","text":"<p>The scanner requires AWS credentials to access your AWS resources. You can configure credentials using any of the following methods:</p>"},{"location":"installation/#aws-cli-configuration","title":"AWS CLI Configuration","text":"<pre><code>aws configure\n</code></pre>"},{"location":"installation/#environment-variables","title":"Environment Variables","text":"<pre><code>export AWS_ACCESS_KEY_ID=your_access_key\nexport AWS_SECRET_ACCESS_KEY=your_secret_key\nexport AWS_DEFAULT_REGION=us-east-1\n</code></pre>"},{"location":"installation/#iam-roles-for-ec2-instances","title":"IAM Roles (for EC2 instances)","text":"<p>If running on an EC2 instance, you can use IAM roles for authentication.</p>"},{"location":"installation/#aws-profiles","title":"AWS Profiles","text":"<p>You can use named profiles for different AWS accounts:</p> <pre><code>aws configure --profile my-profile\n</code></pre> <p>Then use the profile with the scanner:</p> <pre><code>aws-inventory-scanner --profile my-profile\n</code></pre>"},{"location":"installation/#aws-permissions","title":"AWS Permissions","text":"<p>The scanner requires read-only permissions for the AWS services you want to inventory. Here are the recommended permission approaches:</p>"},{"location":"installation/#option-1-aws-managed-policy-easiest","title":"Option 1: AWS Managed Policy (Easiest)","text":"<p>Attach the <code>ReadOnlyAccess</code> managed policy to your IAM user or role:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"arn:aws:iam::aws:policy/ReadOnlyAccess\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre>"},{"location":"installation/#option-2-custom-policy-more-restrictive","title":"Option 2: Custom Policy (More Restrictive)","text":"<p>Create a custom policy with only the permissions needed for the services you want to scan:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"acm:ListCertificates\",\n                \"athena:ListDataCatalogs\",\n                \"autoscaling:Describe*\",\n                \"backup:List*\",\n                \"cloudformation:DescribeStacks\",\n                \"cloudfront:List*\",\n                \"cloudtrail:DescribeTrails\",\n                \"cloudwatch:DescribeAlarms\",\n                \"codebuild:ListProjects\",\n                \"codedeploy:List*\",\n                \"config:Describe*\",\n                \"config:List*\",\n                \"dynamodb:List*\",\n                \"ec2:Describe*\",\n                \"ecr:DescribeRepositories\",\n                \"ecs:List*\",\n                \"efs:DescribeFileSystems\",\n                \"eks:ListClusters\",\n                \"elasticache:Describe*\",\n                \"elasticbeanstalk:DescribeEnvironments\",\n                \"elb:Describe*\",\n                \"es:Describe*\",\n                \"fsx:DescribeFileSystems\",\n                \"glacier:ListVaults\",\n                \"guardduty:ListDetectors\",\n                \"iam:List*\",\n                \"kms:ListKeys\",\n                \"lambda:ListFunctions\",\n                \"network-firewall:ListFirewalls\",\n                \"rds:Describe*\",\n                \"redshift:DescribeClusters\",\n                \"route53:ListHostedZones\",\n                \"route53domains:ListDomains\",\n                \"s3:ListAllMyBuckets\",\n                \"sagemaker:List*\",\n                \"secretsmanager:ListSecrets\",\n                \"sns:ListTopics\",\n                \"sqs:ListQueues\",\n                \"ssm:GetParametersByPath\",\n                \"sts:GetCallerIdentity\",\n                \"sts:GetSessionToken\",\n                \"waf:ListWebACLs\",\n                \"workspaces:DescribeWorkspaces\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>After installation, verify that the scanner is working correctly:</p> <pre><code># Check if the command is available\naws-inventory-scanner --help\n\n# Test with a dry run (if available)\naws-inventory-scanner --region us-east-1 --verbose\n</code></pre>"},{"location":"installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<ol> <li>Permission Denied: Make sure you have the necessary permissions to install Python packages</li> <li>Python Version: Ensure you're using Python 3.8 or higher</li> <li>AWS Credentials: Verify your AWS credentials are properly configured</li> </ol>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during installation:</p> <ol> <li>Check the Troubleshooting guide</li> <li>Review the error messages carefully</li> <li>Ensure all requirements are met</li> <li>Try installing in a fresh virtual environment</li> </ol>"},{"location":"output/","title":"Output Format","text":""},{"location":"output/#output-format","title":"Output Format","text":"<p>The AWS Inventory Scanner generates structured JSON output files containing detailed information about your AWS resources. This page explains the output format, file organization, and how to work with the results.</p>"},{"location":"output/#directory-structure","title":"Directory Structure","text":"<p>The scanner creates a hierarchical directory structure to organize the inventory results:</p> <pre><code>./inventory/\n\u251c\u2500\u2500 123456789012-ec2-us-east-1-describe_instances-Reservations.json\n\u251c\u2500\u2500 123456789012-ec2-us-east-1-describe_security_groups-SecurityGroups.json\n\u251c\u2500\u2500 123456789012-ec2-us-east-1-describe_vpcs-Vpcs.json\n\u251c\u2500\u2500 123456789012-s3-us-east-1-list_buckets-Buckets.json\n\u251c\u2500\u2500 123456789012-rds-us-west-2-describe_db_instances-DBInstances.json\n\u251c\u2500\u2500 123456789012-lambda-eu-west-1-list_functions-Functions.json\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"output/#file-naming-convention","title":"File Naming Convention","text":"<p>Each output file follows a consistent naming pattern:</p> <pre><code>{account_id}-{service}-{region}-{api_method}-{response_key}.json\n</code></pre>"},{"location":"output/#components-explained","title":"Components Explained","text":"<ul> <li>account_id: Your 12-digit AWS account ID (e.g., <code>123456789012</code>)</li> <li>service: AWS service name (e.g., <code>ec2</code>, <code>s3</code>, <code>rds</code>, <code>lambda</code>)</li> <li>region: AWS region code (e.g., <code>us-east-1</code>, <code>us-west-2</code>, <code>eu-west-1</code>)</li> <li>api_method: AWS API method used to collect the data (e.g., <code>describe_instances</code>, <code>list_buckets</code>)</li> <li>response_key: The key in the API response containing the resource list (e.g., <code>Reservations</code>, <code>Buckets</code>)</li> </ul>"},{"location":"output/#example-filenames","title":"Example Filenames","text":"<pre><code>123456789012-ec2-us-east-1-describe_instances-Reservations.json\n123456789012-s3-us-east-1-list_buckets-Buckets.json\n123456789012-rds-us-west-2-describe_db_instances-DBInstances.json\n123456789012-iam-us-east-1-list_users-Users.json\n</code></pre>"},{"location":"output/#json-file-structure","title":"JSON File Structure","text":"<p>Each JSON file contains an array of resources returned by the corresponding AWS API call. The structure follows the AWS API response format exactly.</p>"},{"location":"output/#example-ec2-instances","title":"Example: EC2 Instances","text":"<pre><code>[\n    {\n        \"Groups\": [],\n        \"Instances\": [\n            {\n                \"AmiLaunchIndex\": 0,\n                \"ImageId\": \"ami-0abcdef1234567890\",\n                \"InstanceId\": \"i-1234567890abcdef0\",\n                \"InstanceType\": \"t3.micro\",\n                \"KeyName\": \"my-key-pair\",\n                \"LaunchTime\": \"2023-01-15T10:30:00.000Z\",\n                \"Monitoring\": {\n                    \"State\": \"disabled\"\n                },\n                \"Placement\": {\n                    \"AvailabilityZone\": \"us-east-1a\",\n                    \"GroupName\": \"\",\n                    \"Tenancy\": \"default\"\n                },\n                \"PrivateDnsName\": \"ip-10-0-1-100.ec2.internal\",\n                \"PrivateIpAddress\": \"10.0.1.100\",\n                \"ProductCodes\": [],\n                \"PublicDnsName\": \"\",\n                \"State\": {\n                    \"Code\": 16,\n                    \"Name\": \"running\"\n                },\n                \"StateTransitionReason\": \"\",\n                \"SubnetId\": \"subnet-12345678\",\n                \"VpcId\": \"vpc-87654321\",\n                \"Architecture\": \"x86_64\",\n                \"BlockDeviceMappings\": [\n                    {\n                        \"DeviceName\": \"/dev/xvda\",\n                        \"Ebs\": {\n                            \"AttachTime\": \"2023-01-15T10:30:01.000Z\",\n                            \"DeleteOnTermination\": true,\n                            \"Status\": \"attached\",\n                            \"VolumeId\": \"vol-1234567890abcdef0\"\n                        }\n                    }\n                ],\n                \"ClientToken\": \"\",\n                \"EbsOptimized\": false,\n                \"EnaSupport\": true,\n                \"Hypervisor\": \"xen\",\n                \"NetworkInterfaces\": [\n                    {\n                        \"Association\": {\n                            \"IpOwnerId\": \"amazon\",\n                            \"PublicDnsName\": \"\",\n                            \"PublicIp\": \"54.123.45.67\"\n                        },\n                        \"Attachment\": {\n                            \"AttachTime\": \"2023-01-15T10:30:00.000Z\",\n                            \"AttachmentId\": \"eni-attach-1234567890abcdef0\",\n                            \"DeleteOnTermination\": true,\n                            \"DeviceIndex\": 0,\n                            \"Status\": \"attached\"\n                        },\n                        \"Description\": \"\",\n                        \"Groups\": [\n                            {\n                                \"GroupName\": \"default\",\n                                \"GroupId\": \"sg-12345678\"\n                            }\n                        ],\n                        \"Ipv6Addresses\": [],\n                        \"MacAddress\": \"02:ab:cd:ef:12:34\",\n                        \"NetworkInterfaceId\": \"eni-1234567890abcdef0\",\n                        \"OwnerId\": \"123456789012\",\n                        \"PrivateDnsName\": \"ip-10-0-1-100.ec2.internal\",\n                        \"PrivateIpAddress\": \"10.0.1.100\",\n                        \"PrivateIpAddresses\": [\n                            {\n                                \"Association\": {\n                                    \"IpOwnerId\": \"amazon\",\n                                    \"PublicDnsName\": \"\",\n                                    \"PublicIp\": \"54.123.45.67\"\n                                },\n                                \"Primary\": true,\n                                \"PrivateDnsName\": \"ip-10-0-1-100.ec2.internal\",\n                                \"PrivateIpAddress\": \"10.0.1.100\"\n                            }\n                        ],\n                        \"SourceDestCheck\": true,\n                        \"Status\": \"in-use\",\n                        \"SubnetId\": \"subnet-12345678\",\n                        \"VpcId\": \"vpc-87654321\"\n                    }\n                ],\n                \"RootDeviceName\": \"/dev/xvda\",\n                \"RootDeviceType\": \"ebs\",\n                \"SecurityGroups\": [\n                    {\n                        \"GroupName\": \"default\",\n                        \"GroupId\": \"sg-12345678\"\n                    }\n                ],\n                \"SourceDestCheck\": true,\n                \"Tags\": [\n                    {\n                        \"Key\": \"Name\",\n                        \"Value\": \"MyWebServer\"\n                    },\n                    {\n                        \"Key\": \"Environment\",\n                        \"Value\": \"Production\"\n                    }\n                ],\n                \"VirtualizationType\": \"hvm\"\n            }\n        ],\n        \"OwnerId\": \"123456789012\",\n        \"RequesterId\": \"\",\n        \"ReservationId\": \"r-1234567890abcdef0\"\n    }\n]\n</code></pre>"},{"location":"output/#example-s3-buckets","title":"Example: S3 Buckets","text":"<pre><code>[\n    {\n        \"Name\": \"my-application-logs\",\n        \"CreationDate\": \"2023-01-10T14:30:00.000Z\"\n    },\n    {\n        \"Name\": \"my-static-website\",\n        \"CreationDate\": \"2023-02-15T09:15:00.000Z\"\n    },\n    {\n        \"Name\": \"my-backup-bucket\",\n        \"CreationDate\": \"2023-03-01T16:45:00.000Z\"\n    }\n]\n</code></pre>"},{"location":"output/#data-processing-examples","title":"Data Processing Examples","text":""},{"location":"output/#using-jq-for-json-processing","title":"Using jq for JSON Processing","text":"<p>The JSON output can be easily processed using <code>jq</code> or other JSON processing tools:</p> <pre><code># Count total EC2 instances across all files\nfind inventory -name \"*-ec2-*-describe_instances-*.json\" -exec jq -r '.[].Instances | length' {} \\; | awk '{sum += $1} END {print sum}'\n\n# List all running EC2 instances\nfind inventory -name \"*-ec2-*-describe_instances-*.json\" -exec jq -r '.[].Instances[] | select(.State.Name == \"running\") | .InstanceId' {} \\;\n\n# Get all S3 bucket names\njq -r '.[].Name' inventory/*-s3-*-list_buckets-*.json\n\n# Find instances with specific tags\nfind inventory -name \"*-ec2-*-describe_instances-*.json\" -exec jq -r '.[].Instances[] | select(.Tags[]? | select(.Key == \"Environment\" and .Value == \"Production\")) | .InstanceId' {} \\;\n\n# Count resources by service\nls inventory/*.json | cut -d'-' -f2 | sort | uniq -c\n</code></pre>"},{"location":"output/#python-processing-example","title":"Python Processing Example","text":"<pre><code>import json\nimport os\nfrom collections import defaultdict\n\ndef analyze_inventory(inventory_dir):\n    \"\"\"Analyze AWS inventory results.\"\"\"\n\n    resource_counts = defaultdict(int)\n    service_regions = defaultdict(set)\n\n    for filename in os.listdir(inventory_dir):\n        if not filename.endswith('.json'):\n            continue\n\n        # Parse filename\n        parts = filename.replace('.json', '').split('-')\n        if len(parts) &gt;= 5:\n            account_id = parts[0]\n            service = parts[1]\n            region = parts[2]\n            method = parts[3]\n            key = parts[4]\n\n            # Load and count resources\n            filepath = os.path.join(inventory_dir, filename)\n            with open(filepath, 'r') as f:\n                data = json.load(f)\n                resource_count = len(data)\n\n            resource_counts[service] += resource_count\n            service_regions[service].add(region)\n\n            print(f\"{service:20} {region:15} {resource_count:5} resources\")\n\n    print(\"\\nSummary by Service:\")\n    for service, count in sorted(resource_counts.items()):\n        regions = len(service_regions[service])\n        print(f\"{service:20} {count:5} resources across {regions} regions\")\n\n# Usage\nanalyze_inventory('./inventory')\n</code></pre>"},{"location":"output/#bash-processing-example","title":"Bash Processing Example","text":"<pre><code>#!/bin/bash\n\n# Script to summarize AWS inventory results\n\nINVENTORY_DIR=\"./inventory\"\n\necho \"AWS Inventory Summary\"\necho \"====================\"\n\n# Count total files\ntotal_files=$(ls ${INVENTORY_DIR}/*.json 2&gt;/dev/null | wc -l)\necho \"Total inventory files: $total_files\"\n\n# Count by service\necho -e \"\\nResources by Service:\"\necho \"--------------------\"\nfor service in $(ls ${INVENTORY_DIR}/*.json | cut -d'-' -f2 | sort | uniq); do\n    count=$(ls ${INVENTORY_DIR}/*-${service}-*.json | wc -l)\n    echo \"$service: $count files\"\ndone\n\n# Count by region\necho -e \"\\nFiles by Region:\"\necho \"---------------\"\nfor region in $(ls ${INVENTORY_DIR}/*.json | cut -d'-' -f3 | sort | uniq); do\n    count=$(ls ${INVENTORY_DIR}/*-${region}-*.json | wc -l)\n    echo \"$region: $count files\"\ndone\n\n# Find largest files\necho -e \"\\nLargest inventory files:\"\necho \"-----------------------\"\nls -lh ${INVENTORY_DIR}/*.json | sort -k5 -hr | head -5\n</code></pre>"},{"location":"output/#file-size-considerations","title":"File Size Considerations","text":""},{"location":"output/#typical-file-sizes","title":"Typical File Sizes","text":"<ul> <li>Small services (e.g., few Lambda functions): 1-10 KB</li> <li>Medium services (e.g., moderate EC2 usage): 10-100 KB  </li> <li>Large services (e.g., many resources): 100 KB - 1 MB</li> <li>Very large services (e.g., thousands of resources): 1-10 MB+</li> </ul>"},{"location":"output/#storage-requirements","title":"Storage Requirements","text":"<p>For a typical AWS account: - Small account: 10-50 MB total - Medium account: 50-200 MB total - Large account: 200 MB - 1 GB total - Enterprise account: 1 GB+ total</p>"},{"location":"output/#error-handling-in-output","title":"Error Handling in Output","text":""},{"location":"output/#missing-files","title":"Missing Files","text":"<p>If a service is not available in a region or permissions are insufficient, no file will be created for that service/region combination.</p>"},{"location":"output/#empty-files","title":"Empty Files","text":"<p>Services with no resources will create files containing an empty array:</p> <pre><code>[]\n</code></pre>"},{"location":"output/#error-information","title":"Error Information","text":"<p>Errors are logged to the console but do not appear in the JSON output files. Use the <code>--verbose</code> flag to see detailed error information.</p>"},{"location":"output/#working-with-large-datasets","title":"Working with Large Datasets","text":""},{"location":"output/#streaming-processing","title":"Streaming Processing","text":"<p>For very large inventory files, consider streaming processing:</p> <pre><code>import json\n\ndef process_large_inventory(filename):\n    \"\"\"Process large inventory files without loading everything into memory.\"\"\"\n\n    with open(filename, 'r') as f:\n        data = json.load(f)\n\n    # Process in chunks\n    chunk_size = 100\n    for i in range(0, len(data), chunk_size):\n        chunk = data[i:i + chunk_size]\n        # Process chunk\n        for item in chunk:\n            # Process individual resource\n            pass\n</code></pre>"},{"location":"output/#database-import","title":"Database Import","text":"<p>For complex analysis, consider importing the data into a database:</p> <pre><code>-- Example PostgreSQL schema for EC2 instances\nCREATE TABLE ec2_instances (\n    account_id VARCHAR(12),\n    region VARCHAR(20),\n    instance_id VARCHAR(20) PRIMARY KEY,\n    instance_type VARCHAR(20),\n    state VARCHAR(20),\n    launch_time TIMESTAMP,\n    vpc_id VARCHAR(20),\n    subnet_id VARCHAR(20),\n    private_ip INET,\n    public_ip INET,\n    tags JSONB,\n    raw_data JSONB\n);\n</code></pre>"},{"location":"output/#best-practices","title":"Best Practices","text":""},{"location":"output/#file-management","title":"File Management","text":"<ol> <li>Regular cleanup: Remove old inventory files to save disk space</li> <li>Compression: Compress old inventory files for archival</li> <li>Versioning: Keep timestamped directories for historical comparison</li> <li>Backup: Backup important inventory snapshots</li> </ol>"},{"location":"output/#processing-efficiency","title":"Processing Efficiency","text":"<ol> <li>Parallel processing: Process multiple files concurrently</li> <li>Selective processing: Only process files for services you need</li> <li>Caching: Cache processed results to avoid recomputation</li> <li>Indexing: Create indexes for frequently queried data</li> </ol>"},{"location":"output/#data-quality","title":"Data Quality","text":"<ol> <li>Validation: Validate JSON structure before processing</li> <li>Completeness: Check for missing expected files</li> <li>Consistency: Verify data consistency across regions</li> <li>Freshness: Track when inventory was last updated</li> </ol>"},{"location":"services/","title":"Supported Services","text":""},{"location":"services/#supported-aws-services","title":"Supported AWS Services","text":"<p>The AWS Inventory Scanner supports comprehensive resource discovery across 25+ AWS services. This page provides a complete list of all supported services and the specific resources that are collected.</p>"},{"location":"services/#service-categories","title":"Service Categories","text":""},{"location":"services/#compute-services","title":"Compute Services","text":""},{"location":"services/#amazon-ec2-elastic-compute-cloud","title":"Amazon EC2 (Elastic Compute Cloud)","text":"<ul> <li>Instances: Running, stopped, and terminated EC2 instances</li> <li>Security Groups: Inbound and outbound rules for network security</li> <li>VPCs: Virtual Private Clouds and their configurations</li> <li>Volumes: EBS volumes (attached and unattached)</li> <li>Subnets: Public and private subnets</li> <li>Network Interfaces: Elastic Network Interfaces (ENIs)</li> <li>Elastic IPs: Allocated Elastic IP addresses</li> </ul> <p>API Methods Used: - <code>describe_instances</code> \u2192 Reservations - <code>describe_security_groups</code> \u2192 SecurityGroups - <code>describe_vpcs</code> \u2192 Vpcs - <code>describe_volumes</code> \u2192 Volumes - <code>describe_subnets</code> \u2192 Subnets - <code>describe_network_interfaces</code> \u2192 NetworkInterfaces - <code>describe_addresses</code> \u2192 Addresses</p>"},{"location":"services/#aws-lambda","title":"AWS Lambda","text":"<ul> <li>Functions: Lambda functions with their configurations</li> <li>Runtime information: Runtime versions, memory, timeout settings</li> <li>Environment variables: Function environment configurations</li> </ul> <p>API Methods Used: - <code>list_functions</code> \u2192 Functions</p>"},{"location":"services/#amazon-ecs-elastic-container-service","title":"Amazon ECS (Elastic Container Service)","text":"<ul> <li>Clusters: ECS cluster configurations</li> <li>Services: Running services within clusters</li> <li>Task definitions: Container task specifications</li> </ul> <p>API Methods Used: - <code>list_clusters</code> \u2192 ClusterArns</p>"},{"location":"services/#amazon-eks-elastic-kubernetes-service","title":"Amazon EKS (Elastic Kubernetes Service)","text":"<ul> <li>Clusters: Kubernetes cluster configurations</li> <li>Node groups: Worker node configurations</li> <li>Networking: VPC and subnet configurations</li> </ul> <p>API Methods Used: - <code>list_clusters</code> \u2192 Clusters</p>"},{"location":"services/#aws-elastic-beanstalk","title":"AWS Elastic Beanstalk","text":"<ul> <li>Environments: Application environments and their configurations</li> <li>Applications: Deployed applications</li> <li>Platform versions: Runtime platform information</li> </ul> <p>API Methods Used: - <code>describe_environments</code> \u2192 Environments</p>"},{"location":"services/#storage-services","title":"Storage Services","text":""},{"location":"services/#amazon-s3-simple-storage-service","title":"Amazon S3 (Simple Storage Service)","text":"<ul> <li>Buckets: All S3 buckets in the account</li> <li>Bucket policies: Access control policies</li> <li>Versioning: Bucket versioning configurations</li> </ul> <p>API Methods Used: - <code>list_buckets</code> \u2192 Buckets</p>"},{"location":"services/#amazon-efs-elastic-file-system","title":"Amazon EFS (Elastic File System)","text":"<ul> <li>File Systems: EFS file systems and their configurations</li> <li>Mount targets: Network mount points</li> <li>Access points: Application-specific access configurations</li> </ul> <p>API Methods Used: - <code>describe_file_systems</code> \u2192 FileSystems</p>"},{"location":"services/#amazon-fsx","title":"Amazon FSx","text":"<ul> <li>File Systems: FSx file systems (Windows, Lustre, NetApp, OpenZFS)</li> <li>Backups: File system backups</li> <li>Storage configurations: Performance and capacity settings</li> </ul> <p>API Methods Used: - <code>describe_file_systems</code> \u2192 FileSystems</p>"},{"location":"services/#amazon-glacier","title":"Amazon Glacier","text":"<ul> <li>Vaults: Glacier vaults for long-term archival</li> <li>Vault policies: Access control policies</li> <li>Archive inventories: Stored archive information</li> </ul> <p>API Methods Used: - <code>list_vaults</code> \u2192 VaultList</p>"},{"location":"services/#database-services","title":"Database Services","text":""},{"location":"services/#amazon-rds-relational-database-service","title":"Amazon RDS (Relational Database Service)","text":"<ul> <li>DB Instances: Database instances (MySQL, PostgreSQL, Oracle, SQL Server, etc.)</li> <li>DB Snapshots: Database backups and snapshots</li> <li>DB Subnet Groups: Network configurations for databases</li> <li>DB Clusters: Aurora clusters and their configurations</li> </ul> <p>API Methods Used: - <code>describe_db_instances</code> \u2192 DBInstances - <code>describe_db_snapshots</code> \u2192 DBSnapshots - <code>describe_db_subnet_groups</code> \u2192 DBSubnetGroups - <code>describe_db_clusters</code> \u2192 DBClusters</p>"},{"location":"services/#amazon-dynamodb","title":"Amazon DynamoDB","text":"<ul> <li>Tables: DynamoDB tables and their configurations</li> <li>Backups: Point-in-time recovery and on-demand backups</li> <li>Global tables: Multi-region table configurations</li> </ul> <p>API Methods Used: - <code>list_tables</code> \u2192 TableNames - <code>list_backups</code> \u2192 BackupSummaries</p>"},{"location":"services/#amazon-elasticache","title":"Amazon ElastiCache","text":"<ul> <li>Cache Clusters: Redis and Memcached clusters</li> <li>Replication groups: Redis replication configurations</li> <li>Parameter groups: Cache configuration parameters</li> </ul> <p>API Methods Used: - <code>describe_cache_clusters</code> \u2192 CacheClusters</p>"},{"location":"services/#amazon-redshift","title":"Amazon Redshift","text":"<ul> <li>Clusters: Data warehouse clusters</li> <li>Snapshots: Cluster snapshots and backups</li> <li>Parameter groups: Cluster configuration parameters</li> </ul> <p>API Methods Used: - <code>describe_clusters</code> \u2192 Clusters</p>"},{"location":"services/#networking-services","title":"Networking Services","text":""},{"location":"services/#elastic-load-balancing-elb","title":"Elastic Load Balancing (ELB)","text":"<ul> <li>Load Balancers: Classic, Application, and Network Load Balancers</li> <li>Target groups: Load balancer targets</li> <li>Listeners: Load balancer routing rules</li> </ul> <p>API Methods Used: - <code>describe_load_balancers</code> \u2192 LoadBalancerDescriptions</p>"},{"location":"services/#amazon-cloudfront","title":"Amazon CloudFront","text":"<ul> <li>Distributions: CDN distributions and their configurations</li> <li>Origin Access Identities: S3 bucket access controls</li> <li>Cache behaviors: Content caching rules</li> </ul> <p>API Methods Used: - <code>list_distributions</code> \u2192 DistributionList - <code>list_cloud_front_origin_access_identities</code> \u2192 CloudFrontOriginAccessIdentityList</p>"},{"location":"services/#amazon-route-53","title":"Amazon Route 53","text":"<ul> <li>Hosted Zones: DNS hosted zones</li> <li>Record sets: DNS records</li> <li>Health checks: Route 53 health monitoring</li> </ul> <p>API Methods Used: - <code>list_hosted_zones</code> \u2192 HostedZones</p>"},{"location":"services/#route-53-domains-us-east-1-only","title":"Route 53 Domains (US-East-1 only)","text":"<ul> <li>Domains: Registered domain names</li> <li>Domain configurations: DNS and transfer settings</li> </ul> <p>API Methods Used: - <code>list_domains</code> \u2192 Domains</p>"},{"location":"services/#security-services","title":"Security Services","text":""},{"location":"services/#aws-iam-identity-and-access-management-us-east-1-only","title":"AWS IAM (Identity and Access Management) - US-East-1 only","text":"<ul> <li>Users: IAM users and their configurations</li> <li>Roles: IAM roles and trust policies</li> <li>Groups: IAM groups and their members</li> <li>Policies: Managed and inline policies</li> </ul> <p>API Methods Used: - <code>list_users</code> \u2192 Users - <code>list_roles</code> \u2192 Roles - <code>list_groups</code> \u2192 Groups</p>"},{"location":"services/#aws-secrets-manager","title":"AWS Secrets Manager","text":"<ul> <li>Secrets: Stored secrets and their metadata</li> <li>Rotation configurations: Automatic rotation settings</li> <li>Resource policies: Access control policies</li> </ul> <p>API Methods Used: - <code>list_secrets</code> \u2192 SecretList</p>"},{"location":"services/#amazon-guardduty","title":"Amazon GuardDuty","text":"<ul> <li>Detectors: GuardDuty detectors and their configurations</li> <li>Findings: Security findings and threats</li> <li>Member accounts: Multi-account configurations</li> </ul> <p>API Methods Used: - <code>list_detectors</code> \u2192 DetectorIds</p>"},{"location":"services/#aws-waf-web-application-firewall","title":"AWS WAF (Web Application Firewall)","text":"<ul> <li>Web ACLs: Web application firewall rules</li> <li>Rule groups: Reusable rule collections</li> <li>IP sets: IP address allow/deny lists</li> </ul> <p>API Methods Used: - <code>list_web_acls</code> \u2192 WebACLs</p>"},{"location":"services/#aws-network-firewall","title":"AWS Network Firewall","text":"<ul> <li>Firewalls: Network firewall configurations</li> <li>Firewall policies: Traffic filtering rules</li> <li>Rule groups: Network security rules</li> </ul> <p>API Methods Used: - <code>list_firewalls</code> \u2192 Firewalls</p>"},{"location":"services/#management-governance","title":"Management &amp; Governance","text":""},{"location":"services/#aws-cloudformation","title":"AWS CloudFormation","text":"<ul> <li>Stacks: Infrastructure stacks and their resources</li> <li>Stack events: Deployment history</li> <li>Stack outputs: Exported values</li> </ul> <p>API Methods Used: - <code>describe_stacks</code> \u2192 Stacks</p>"},{"location":"services/#amazon-cloudwatch","title":"Amazon CloudWatch","text":"<ul> <li>Alarms: Metric alarms and their configurations</li> <li>Metrics: Custom and AWS service metrics</li> <li>Dashboards: CloudWatch dashboards</li> </ul> <p>API Methods Used: - <code>describe_alarms</code> \u2192 MetricAlarms</p>"},{"location":"services/#aws-config","title":"AWS Config","text":"<ul> <li>Configuration Rules: Compliance rules</li> <li>Configuration Aggregators: Multi-account/region aggregation</li> <li>Resource Evaluations: Compliance evaluation results</li> <li>Configuration Recorders: Resource change tracking</li> </ul> <p>API Methods Used: - <code>describe_config_rules</code> \u2192 ConfigRules - <code>describe_configuration_aggregators</code> \u2192 ConfigurationAggregators - <code>list_resource_evaluations</code> \u2192 ResourceEvaluations - <code>describe_configuration_recorders</code> \u2192 ConfigurationRecorders</p>"},{"location":"services/#aws-backup","title":"AWS Backup","text":"<ul> <li>Backup Plans: Backup scheduling and retention policies</li> <li>Backup Vaults: Backup storage locations</li> <li>Backup Jobs: Active and completed backup operations</li> </ul> <p>API Methods Used: - <code>list_backup_plans</code> \u2192 BackupPlansList - <code>list_backup_vaults</code> \u2192 BackupVaultList - <code>list_backup_jobs</code> \u2192 BackupJobs</p>"},{"location":"services/#aws-cloudtrail","title":"AWS CloudTrail","text":"<ul> <li>Trails: API logging configurations</li> <li>Event history: API call records</li> <li>Insights: CloudTrail Insights configurations</li> </ul> <p>API Methods Used: - <code>describe_trails</code> \u2192 trailList</p>"},{"location":"services/#developer-tools","title":"Developer Tools","text":""},{"location":"services/#aws-codebuild","title":"AWS CodeBuild","text":"<ul> <li>Projects: Build projects and their configurations</li> <li>Builds: Build history and status</li> <li>Build environments: Runtime environments</li> </ul> <p>API Methods Used: - <code>list_projects</code> \u2192 Projects</p>"},{"location":"services/#aws-codedeploy","title":"AWS CodeDeploy","text":"<ul> <li>Applications: Deployment applications</li> <li>Deployments: Deployment history and status</li> <li>Deployment groups: Target configurations</li> </ul> <p>API Methods Used: - <code>list_applications</code> \u2192 Applications - <code>list_deployments</code> \u2192 Deployments</p>"},{"location":"services/#analytics","title":"Analytics","text":""},{"location":"services/#amazon-athena","title":"Amazon Athena","text":"<ul> <li>Data Catalogs: Metadata catalogs for querying</li> <li>Databases: Athena databases</li> <li>Tables: Queryable data tables</li> </ul> <p>API Methods Used: - <code>list_data_catalogs</code> \u2192 DataCatalogsSummary</p>"},{"location":"services/#machine-learning","title":"Machine Learning","text":""},{"location":"services/#amazon-sagemaker","title":"Amazon SageMaker","text":"<ul> <li>Clusters: SageMaker compute clusters</li> <li>Endpoints: Model serving endpoints</li> <li>Notebook Instances: Jupyter notebook environments</li> <li>Models: Trained machine learning models</li> </ul> <p>API Methods Used: - <code>list_clusters</code> \u2192 ClusterSummaries - <code>list_endpoints</code> \u2192 Endpoints - <code>list_notebook_instances</code> \u2192 NotebookInstances</p>"},{"location":"services/#application-integration","title":"Application Integration","text":""},{"location":"services/#amazon-sns-simple-notification-service","title":"Amazon SNS (Simple Notification Service)","text":"<ul> <li>Topics: SNS topics and their configurations</li> <li>Subscriptions: Topic subscriptions</li> <li>Platform applications: Mobile push notifications</li> </ul> <p>API Methods Used: - <code>list_topics</code> \u2192 Topics</p>"},{"location":"services/#amazon-sqs-simple-queue-service","title":"Amazon SQS (Simple Queue Service)","text":"<ul> <li>Queues: SQS queues and their configurations</li> <li>Queue attributes: Message retention, visibility timeout</li> <li>Dead letter queues: Failed message handling</li> </ul> <p>API Methods Used: - <code>list_queues</code> \u2192 QueueUrls</p>"},{"location":"services/#other-services","title":"Other Services","text":""},{"location":"services/#amazon-ecr-elastic-container-registry","title":"Amazon ECR (Elastic Container Registry)","text":"<ul> <li>Repositories: Container image repositories</li> <li>Images: Stored container images</li> <li>Repository policies: Access control policies</li> </ul> <p>API Methods Used: - <code>describe_repositories</code> \u2192 Repositories</p>"},{"location":"services/#aws-certificate-manager-acm","title":"AWS Certificate Manager (ACM)","text":"<ul> <li>Certificates: SSL/TLS certificates</li> <li>Certificate validation: Domain and DNS validation</li> <li>Certificate usage: Associated AWS resources</li> </ul> <p>API Methods Used: - <code>list_certificates</code> \u2192 CertificateSummaryList</p>"},{"location":"services/#amazon-api-gateway-v2","title":"Amazon API Gateway v2","text":"<ul> <li>APIs: REST and WebSocket APIs</li> <li>Stages: API deployment stages</li> <li>Routes: API routing configurations</li> </ul> <p>API Methods Used: - <code>get_apis</code> \u2192 Items</p>"},{"location":"services/#auto-scaling","title":"Auto Scaling","text":"<ul> <li>Auto Scaling Groups: EC2 auto scaling configurations</li> <li>Launch Configurations: Instance launch templates</li> <li>Auto Scaling Instances: Instances managed by auto scaling</li> </ul> <p>API Methods Used: - <code>describe_auto_scaling_groups</code> \u2192 AutoScalingGroups - <code>describe_launch_configurations</code> \u2192 LaunchConfigurations - <code>describe_auto_scaling_instances</code> \u2192 AutoScalingInstances</p>"},{"location":"services/#aws-systems-manager-ssm","title":"AWS Systems Manager (SSM)","text":"<ul> <li>Parameters: Parameter Store values</li> <li>Parameter hierarchies: Organized parameter structures</li> <li>Secure strings: Encrypted parameter values</li> </ul> <p>API Methods Used: - <code>get_parameters_by_path</code> \u2192 Parameters</p>"},{"location":"services/#aws-key-management-service-kms","title":"AWS Key Management Service (KMS)","text":"<ul> <li>Keys: Customer and AWS managed keys</li> <li>Key policies: Access control policies</li> <li>Key usage: Encryption/decryption operations</li> </ul> <p>API Methods Used: - <code>list_keys</code> \u2192 Keys</p>"},{"location":"services/#amazon-workspaces","title":"Amazon WorkSpaces","text":"<ul> <li>WorkSpaces: Virtual desktop instances</li> <li>Directories: Active Directory configurations</li> <li>Bundles: WorkSpace image configurations</li> </ul> <p>API Methods Used: - <code>describe_workspaces</code> \u2192 Workspaces</p>"},{"location":"services/#amazon-elasticsearch-service","title":"Amazon Elasticsearch Service","text":"<ul> <li>Reserved Instances: Reserved Elasticsearch capacity</li> <li>Domains: Elasticsearch clusters</li> <li>Domain configurations: Cluster settings</li> </ul> <p>API Methods Used: - <code>describe_reserved_elasticsearch_instances</code> \u2192 ReservedElasticsearchInstances</p>"},{"location":"services/#regional-vs-global-services","title":"Regional vs Global Services","text":""},{"location":"services/#global-services-us-east-1-only","title":"Global Services (US-East-1 only)","text":"<p>These services are global and only scanned in the US-East-1 region: - IAM (Users, Roles, Groups) - Route 53 Domains</p>"},{"location":"services/#regional-services","title":"Regional Services","text":"<p>All other services are scanned in each specified region or all regions if none are specified.</p>"},{"location":"services/#service-coverage-notes","title":"Service Coverage Notes","text":"<ul> <li>Comprehensive Coverage: The scanner aims to collect the most important resources from each service</li> <li>Read-Only Operations: All operations are read-only and do not modify your AWS resources</li> <li>Error Handling: Services that are not available in a region or lack permissions are gracefully skipped</li> <li>Extensible: The scanner architecture allows for easy addition of new services and resources</li> </ul>"},{"location":"services/#adding-new-services","title":"Adding New Services","text":"<p>The scanner is designed to be easily extensible. New services can be added by updating the service definitions in the scanner configuration. See the API Reference for details on extending the scanner.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<p>This guide helps you resolve common issues when using the AWS Inventory Scanner.</p>"},{"location":"troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#issue-pip-install-aws-inventory-scanner-fails","title":"Issue: <code>pip install aws-inventory-scanner</code> fails","text":"<p>Symptoms: </p><pre><code>ERROR: Could not find a version that satisfies the requirement aws-inventory-scanner\n</code></pre> <p>Solutions: 1. Check Python version: </p><pre><code>python --version  # Should be 3.8 or higher\n</code></pre> <ol> <li> <p>Upgrade pip: </p><pre><code>pip install --upgrade pip\n</code></pre> </li> <li> <p>Install from source: </p><pre><code>git clone https://github.com/yourusername/aws-inventory-scanner.git\ncd aws-inventory-scanner\npip install -e .\n</code></pre> </li> </ol>"},{"location":"troubleshooting/#issue-permission-denied-during-installation","title":"Issue: Permission denied during installation","text":"<p>Symptoms: </p><pre><code>ERROR: Could not install packages due to an EnvironmentError: [Errno 13] Permission denied\n</code></pre> <p>Solutions: 1. Use virtual environment (recommended): </p><pre><code>python -m venv aws-scanner-env\nsource aws-scanner-env/bin/activate  # Linux/macOS\n# or\naws-scanner-env\\Scripts\\activate     # Windows\npip install aws-inventory-scanner\n</code></pre> <ol> <li>Install for user only: <pre><code>pip install --user aws-inventory-scanner\n</code></pre></li> </ol>"},{"location":"troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"troubleshooting/#issue-no-aws-credentials-found","title":"Issue: No AWS credentials found","text":"<p>Symptoms: </p><pre><code>botocore.exceptions.NoCredentialsError: Unable to locate credentials\n</code></pre> <p>Solutions: 1. Configure AWS CLI: </p><pre><code>aws configure\n</code></pre> <ol> <li> <p>Set environment variables: </p><pre><code>export AWS_ACCESS_KEY_ID=your_access_key\nexport AWS_SECRET_ACCESS_KEY=your_secret_key\nexport AWS_DEFAULT_REGION=us-east-1\n</code></pre> </li> <li> <p>Use IAM roles (for EC2 instances):</p> </li> <li> <p>Attach an IAM role with appropriate permissions to your EC2 instance</p> </li> <li> <p>Verify credentials: </p><pre><code>aws sts get-caller-identity\n</code></pre> </li> </ol>"},{"location":"troubleshooting/#issue-access-denied-errors","title":"Issue: Access denied errors","text":"<p>Symptoms: </p><pre><code>botocore.exceptions.ClientError: An error occurred (AccessDenied) when calling the ListBuckets operation\n</code></pre> <p>Solutions: 1. Check IAM permissions:    - Ensure your user/role has the necessary read permissions    - Consider using the <code>ReadOnlyAccess</code> managed policy for testing</p> <ol> <li> <p>Test specific service access: </p><pre><code>aws ec2 describe-instances --region us-east-1\naws s3 ls\n</code></pre> </li> <li> <p>Use minimal permissions policy: </p><pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:Describe*\",\n                \"s3:List*\",\n                \"rds:Describe*\",\n                \"iam:List*\",\n                \"sts:GetCallerIdentity\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre> </li> </ol>"},{"location":"troubleshooting/#runtime-issues","title":"Runtime Issues","text":""},{"location":"troubleshooting/#issue-scanner-hangs-or-runs-very-slowly","title":"Issue: Scanner hangs or runs very slowly","text":"<p>Symptoms: - Scanner appears to freeze - Very slow progress - High CPU usage</p> <p>Solutions: 1. Reduce worker count: </p><pre><code>aws-inventory-scanner --workers 10\n</code></pre> <ol> <li> <p>Scan specific regions: </p><pre><code>aws-inventory-scanner --region us-east-1\n</code></pre> </li> <li> <p>Enable verbose logging to identify bottlenecks: </p><pre><code>aws-inventory-scanner --verbose\n</code></pre> </li> <li> <p>Check network connectivity: </p><pre><code>ping ec2.us-east-1.amazonaws.com\n</code></pre> </li> </ol>"},{"location":"troubleshooting/#issue-rate-limiting-errors","title":"Issue: Rate limiting errors","text":"<p>Symptoms: </p><pre><code>botocore.exceptions.ClientError: An error occurred (Throttling) when calling the DescribeInstances operation: Rate exceeded\n</code></pre> <p>Solutions: 1. Reduce concurrent workers: </p><pre><code>aws-inventory-scanner --workers 5\n</code></pre> <ol> <li> <p>Add delays between requests (modify scanner): </p><pre><code>import time\nfrom aws_inventory_scanner import AWSInventoryScanner\n\nclass SlowScanner(AWSInventoryScanner):\n    def process_service_region(self, *args, **kwargs):\n        time.sleep(0.1)  # Add 100ms delay\n        return super().process_service_region(*args, **kwargs)\n</code></pre> </li> <li> <p>Use exponential backoff (built-in retry logic should handle this)</p> </li> </ol>"},{"location":"troubleshooting/#issue-out-of-memory-errors","title":"Issue: Out of memory errors","text":"<p>Symptoms: </p><pre><code>MemoryError: Unable to allocate memory\n</code></pre> <p>Solutions: 1. Scan fewer regions at once: </p><pre><code>aws-inventory-scanner --region us-east-1\n</code></pre> <ol> <li> <p>Reduce worker count: </p><pre><code>aws-inventory-scanner --workers 10\n</code></pre> </li> <li> <p>Monitor memory usage: </p><pre><code># Linux/macOS\ntop -p $(pgrep -f aws-inventory-scanner)\n\n# Or use htop for better visualization\nhtop\n</code></pre> </li> </ol>"},{"location":"troubleshooting/#output-issues","title":"Output Issues","text":""},{"location":"troubleshooting/#issue-empty-or-missing-output-files","title":"Issue: Empty or missing output files","text":"<p>Symptoms: - No files created in output directory - Files exist but are empty (<code>[]</code>)</p> <p>Solutions: 1. Check permissions on output directory: </p><pre><code>ls -la ./inventory/\nmkdir -p ./inventory\nchmod 755 ./inventory\n</code></pre> <ol> <li> <p>Verify AWS resources exist: </p><pre><code>aws ec2 describe-instances --region us-east-1\n</code></pre> </li> <li> <p>Check for errors in verbose mode: </p><pre><code>aws-inventory-scanner --verbose\n</code></pre> </li> <li> <p>Verify account has resources:</p> </li> <li>Empty files are normal if no resources exist for that service/region</li> </ol>"},{"location":"troubleshooting/#issue-json-parsing-errors-when-processing-output","title":"Issue: JSON parsing errors when processing output","text":"<p>Symptoms: </p><pre><code>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n</code></pre> <p>Solutions: 1. Check file integrity: </p><pre><code># Verify JSON files are valid\nfind inventory -name \"*.json\" -exec python -m json.tool {} \\; &gt; /dev/null\n</code></pre> <ol> <li> <p>Look for truncated files: </p><pre><code># Find files that don't end with ']'\nfind inventory -name \"*.json\" -exec sh -c 'tail -c 1 \"$1\" | grep -v \"]\"' _ {} \\;\n</code></pre> </li> <li> <p>Re-run scan for corrupted files: </p><pre><code># Remove corrupted files and re-scan\nrm inventory/corrupted-file.json\naws-inventory-scanner\n</code></pre> </li> </ol>"},{"location":"troubleshooting/#network-issues","title":"Network Issues","text":""},{"location":"troubleshooting/#issue-connection-timeouts","title":"Issue: Connection timeouts","text":"<p>Symptoms: </p><pre><code>botocore.exceptions.ConnectTimeoutError: Connect timeout on endpoint URL\n</code></pre> <p>Solutions: 1. Check internet connectivity: </p><pre><code>ping aws.amazon.com\ncurl -I https://ec2.us-east-1.amazonaws.com\n</code></pre> <ol> <li> <p>Configure proxy if needed: </p><pre><code>export HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\n</code></pre> </li> <li> <p>Increase timeout values: </p><pre><code>from botocore.client import Config\nfrom aws_inventory_scanner import AWSInventoryScanner\n\nclass TimeoutScanner(AWSInventoryScanner):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.config = Config(\n            connect_timeout=30,  # Increase from default 5\n            read_timeout=30,\n            retries={'max_attempts': 10}\n        )\n</code></pre> </li> </ol>"},{"location":"troubleshooting/#issue-ssl-certificate-errors","title":"Issue: SSL certificate errors","text":"<p>Symptoms: </p><pre><code>botocore.exceptions.SSLError: SSL validation failed\n</code></pre> <p>Solutions: 1. Update certificates: </p><pre><code># Ubuntu/Debian\nsudo apt-get update &amp;&amp; sudo apt-get install ca-certificates\n\n# CentOS/RHEL\nsudo yum update ca-certificates\n\n# macOS\nbrew install ca-certificates\n</code></pre> <ol> <li>Disable SSL verification (not recommended for production): <pre><code>export AWS_CA_BUNDLE=\"\"\n</code></pre></li> </ol>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#issue-scan-takes-too-long","title":"Issue: Scan takes too long","text":"<p>Symptoms: - Scan runs for hours without completing - Progress appears very slow</p> <p>Solutions: 1. Optimize worker count: </p><pre><code># Start with CPU count * 2\naws-inventory-scanner --workers $(nproc --all)\n</code></pre> <ol> <li> <p>Profile the scan: </p><pre><code>import cProfile\nfrom aws_inventory_scanner import AWSInventoryScanner\n\ndef profile_scan():\n    scanner = AWSInventoryScanner()\n    scanner.scan()\n\ncProfile.run('profile_scan()', 'scan_profile.prof')\n</code></pre> </li> <li> <p>Scan incrementally: </p><pre><code># Scan one region at a time\nfor region in us-east-1 us-west-2 eu-west-1; do\n    aws-inventory-scanner --region $region --output-dir inventory-$region\ndone\n</code></pre> </li> <li> <p>Use SSD storage:</p> </li> <li>Ensure output directory is on fast storage (SSD)</li> </ol>"},{"location":"troubleshooting/#service-specific-issues","title":"Service-Specific Issues","text":""},{"location":"troubleshooting/#issue-iam-resources-not-found","title":"Issue: IAM resources not found","text":"<p>Symptoms: - No IAM users, roles, or groups in output - IAM files are empty</p> <p>Solutions: 1. IAM is global - only scanned in us-east-1: </p><pre><code>aws-inventory-scanner --region us-east-1\n</code></pre> <ol> <li>Check IAM permissions: <pre><code>aws iam list-users\naws iam list-roles\n</code></pre></li> </ol>"},{"location":"troubleshooting/#issue-s3-buckets-missing-from-some-regions","title":"Issue: S3 buckets missing from some regions","text":"<p>Symptoms: - S3 buckets only appear in one region file</p> <p>Solutions: 1. S3 is global but listed in us-east-1:    - This is expected behavior    - All buckets appear in the us-east-1 S3 file regardless of their actual region</p> <ol> <li>Verify bucket access: <pre><code>aws s3 ls\n</code></pre></li> </ol>"},{"location":"troubleshooting/#issue-some-services-return-no-data","title":"Issue: Some services return no data","text":"<p>Symptoms: - Certain services consistently return empty results - Services work with AWS CLI but not with scanner</p> <p>Solutions: 1. Check service availability in region: </p><pre><code>aws ec2 describe-regions --query 'Regions[?RegionName==`us-east-1`]'\n</code></pre> <ol> <li>Verify service is supported:</li> <li>Check the Supported Services documentation</li> <li> <p>Some services may not be available in all regions</p> </li> <li> <p>Test service manually: </p><pre><code>aws lambda list-functions --region us-east-1\n</code></pre> </li> </ol>"},{"location":"troubleshooting/#debugging-techniques","title":"Debugging Techniques","text":""},{"location":"troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># Maximum verbosity\naws-inventory-scanner --verbose\n\n# Python logging\nexport PYTHONPATH=/path/to/aws-inventory-scanner\npython -c \"\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nfrom aws_inventory_scanner import AWSInventoryScanner\nscanner = AWSInventoryScanner()\nscanner.scan()\n\"\n</code></pre>"},{"location":"troubleshooting/#monitor-resource-usage","title":"Monitor Resource Usage","text":"<pre><code># Monitor during scan\nwatch -n 1 'ps aux | grep aws-inventory-scanner'\n\n# Monitor disk usage\nwatch -n 5 'du -sh ./inventory'\n\n# Monitor network usage\nsudo nethogs  # Linux\nnettop        # macOS\n</code></pre>"},{"location":"troubleshooting/#test-individual-services","title":"Test Individual Services","text":"<pre><code>import boto3\nfrom botocore.client import Config\n\n# Test specific service/region combination\nconfig = Config(retries={'max_attempts': 5, 'mode': 'adaptive'})\nclient = boto3.client('ec2', region_name='us-east-1', config=config)\n\ntry:\n    response = client.describe_instances()\n    print(f\"Found {len(response['Reservations'])} reservations\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"troubleshooting/#validate-output-files","title":"Validate Output Files","text":"<pre><code>#!/bin/bash\n# Validate all JSON files\n\necho \"Validating JSON files...\"\ninvalid_files=0\n\nfor file in inventory/*.json; do\n    if ! python -m json.tool \"$file\" &gt; /dev/null 2&gt;&amp;1; then\n        echo \"Invalid JSON: $file\"\n        invalid_files=$((invalid_files + 1))\n    fi\ndone\n\nif [ $invalid_files -eq 0 ]; then\n    echo \"All JSON files are valid\"\nelse\n    echo \"Found $invalid_files invalid JSON files\"\nfi\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#log-collection","title":"Log Collection","text":"<p>When reporting issues, collect the following information:</p> <pre><code># System information\nuname -a\npython --version\npip show aws-inventory-scanner\n\n# AWS configuration\naws configure list\naws sts get-caller-identity\n\n# Run with verbose logging\naws-inventory-scanner --verbose &gt; scan.log 2&gt;&amp;1\n\n# Check output\nls -la inventory/\nhead -n 20 inventory/*.json\n</code></pre>"},{"location":"troubleshooting/#common-log-messages","title":"Common Log Messages","text":""},{"location":"troubleshooting/#normal-messages","title":"Normal Messages","text":"<pre><code>INFO - Starting AWS inventory scan for account 123456789012\nINFO - Scanning regions: ['us-east-1', 'us-west-2']\nINFO - Collected 5 ec2 resources in us-east-1 using describe_instances/Reservations\n</code></pre>"},{"location":"troubleshooting/#warning-messages","title":"Warning Messages","text":"<pre><code>DEBUG - Error collecting describe_instances/Reservations: An error occurred (UnauthorizedOperation)\nDEBUG - 123456789012-lambda-us-west-2-list_functions-Functions.json already exists. Skipping.\n</code></pre>"},{"location":"troubleshooting/#error-messages","title":"Error Messages","text":"<pre><code>ERROR - Error writing to file: [Errno 28] No space left on device\nERROR - Scan failed: An error occurred (AccessDenied) when calling the GetSessionToken operation\n</code></pre>"},{"location":"troubleshooting/#support-resources","title":"Support Resources","text":"<ol> <li>Check the documentation:</li> <li>Installation Guide</li> <li>Usage Guide</li> <li> <p>API Reference</p> </li> <li> <p>Search existing issues:</p> </li> <li>GitHub Issues (if available)</li> <li> <p>Stack Overflow with tag <code>aws-inventory-scanner</code></p> </li> <li> <p>Create a minimal reproduction case: </p><pre><code>aws-inventory-scanner --region us-east-1 --workers 1 --verbose\n</code></pre> </li> <li> <p>Provide system information:</p> </li> <li>Operating system and version</li> <li>Python version</li> <li>AWS CLI version</li> <li>Scanner version</li> </ol> <p>Remember to remove sensitive information (account IDs, resource names, etc.) from logs before sharing them.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage-guide","title":"Usage Guide","text":""},{"location":"usage/#command-line-interface","title":"Command Line Interface","text":"<p>The AWS Inventory Scanner provides a comprehensive command-line interface for scanning AWS resources.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<pre><code># Scan all regions with default settings\naws-inventory-scanner\n</code></pre> <p>This will: - Scan all AWS regions - Use default AWS credentials - Save results to <code>./inventory/</code> directory - Use 35 concurrent workers</p>"},{"location":"usage/#command-line-options","title":"Command Line Options","text":""},{"location":"usage/#region-selection","title":"Region Selection","text":"<pre><code># Scan specific regions\naws-inventory-scanner --region us-east-1 --region us-west-2\n\n# Scan a single region\naws-inventory-scanner --region eu-west-1\n</code></pre>"},{"location":"usage/#aws-profile","title":"AWS Profile","text":"<pre><code># Use a specific AWS profile\naws-inventory-scanner --profile my-aws-profile\n\n# Use a profile with specific regions\naws-inventory-scanner --profile production --region us-east-1 --region us-west-2\n</code></pre>"},{"location":"usage/#output-directory","title":"Output Directory","text":"<pre><code># Specify custom output directory\naws-inventory-scanner --output-dir /path/to/my/inventory\n\n# Use relative path\naws-inventory-scanner --output-dir ./my-scan-results\n</code></pre>"},{"location":"usage/#concurrency-control","title":"Concurrency Control","text":"<pre><code># Adjust number of concurrent workers (default: 35)\naws-inventory-scanner --workers 50\n\n# Use fewer workers for rate limiting\naws-inventory-scanner --workers 10\n</code></pre>"},{"location":"usage/#verbose-logging","title":"Verbose Logging","text":"<pre><code># Enable verbose logging for debugging\naws-inventory-scanner --verbose\n\n# Combine with other options\naws-inventory-scanner --verbose --region us-east-1 --workers 20\n</code></pre>"},{"location":"usage/#complete-example","title":"Complete Example","text":"<pre><code># Comprehensive scan with custom settings\naws-inventory-scanner \\\n  --profile production \\\n  --region us-east-1 \\\n  --region us-west-2 \\\n  --region eu-west-1 \\\n  --output-dir ./production-inventory \\\n  --workers 25 \\\n  --verbose\n</code></pre>"},{"location":"usage/#python-api","title":"Python API","text":"<p>The scanner can also be used programmatically through its Python API.</p>"},{"location":"usage/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from aws_inventory_scanner import AWSInventoryScanner\n\n# Create scanner with default settings\nscanner = AWSInventoryScanner()\n\n# Run the scan\nscanner.scan()\n</code></pre>"},{"location":"usage/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>from aws_inventory_scanner import AWSInventoryScanner\n\n# Create scanner with custom settings\nscanner = AWSInventoryScanner(\n    regions=['us-east-1', 'us-west-2', 'eu-west-1'],\n    output_dir='./my-inventory',\n    workers=25\n)\n\n# Run scan with specific AWS profile\nscanner.scan(profile_name='my-aws-profile')\n</code></pre>"},{"location":"usage/#integration-example","title":"Integration Example","text":"<pre><code>import os\nfrom aws_inventory_scanner import AWSInventoryScanner\n\ndef scan_aws_resources():\n    \"\"\"Scan AWS resources and return results directory.\"\"\"\n\n    # Create output directory with timestamp\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    output_dir = f\"./scans/scan_{timestamp}\"\n\n    # Configure scanner\n    scanner = AWSInventoryScanner(\n        regions=['us-east-1', 'us-west-2'],\n        output_dir=output_dir,\n        workers=30\n    )\n\n    try:\n        # Run the scan\n        scanner.scan(profile_name='production')\n        print(f\"Scan completed successfully. Results in: {output_dir}\")\n        return output_dir\n    except Exception as e:\n        print(f\"Scan failed: {e}\")\n        return None\n\n# Use the function\nresults_dir = scan_aws_resources()\nif results_dir:\n    # Process results\n    for filename in os.listdir(results_dir):\n        if filename.endswith('.json'):\n            print(f\"Found resource file: {filename}\")\n</code></pre>"},{"location":"usage/#scanning-strategies","title":"Scanning Strategies","text":""},{"location":"usage/#full-account-scan","title":"Full Account Scan","text":"<p>For a comprehensive inventory of your entire AWS account:</p> <pre><code>aws-inventory-scanner --verbose\n</code></pre> <p>This scans all regions and all supported services.</p>"},{"location":"usage/#regional-focus","title":"Regional Focus","text":"<p>For scanning specific regions (useful for regional deployments):</p> <pre><code>aws-inventory-scanner \\\n  --region us-east-1 \\\n  --region us-west-2 \\\n  --verbose\n</code></pre>"},{"location":"usage/#development-vs-production","title":"Development vs Production","text":"<p>Use different profiles for different environments:</p> <pre><code># Development environment\naws-inventory-scanner --profile dev --region us-west-2\n\n# Production environment\naws-inventory-scanner --profile prod --workers 50\n</code></pre>"},{"location":"usage/#rate-limiting","title":"Rate Limiting","text":"<p>If you encounter rate limiting issues:</p> <pre><code># Reduce concurrent workers\naws-inventory-scanner --workers 10\n\n# Focus on specific regions\naws-inventory-scanner --region us-east-1 --workers 15\n</code></pre>"},{"location":"usage/#output-management","title":"Output Management","text":""},{"location":"usage/#directory-structure","title":"Directory Structure","text":"<p>The scanner creates a structured output directory:</p> <pre><code>./inventory/\n\u251c\u2500\u2500 123456789012-ec2-us-east-1-describe_instances-Reservations.json\n\u251c\u2500\u2500 123456789012-s3-us-east-1-list_buckets-Buckets.json\n\u251c\u2500\u2500 123456789012-rds-us-west-2-describe_db_instances-DBInstances.json\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"usage/#file-naming-convention","title":"File Naming Convention","text":"<p>Files are named using the pattern: <code>{account_id}-{service}-{region}-{method}-{key}.json</code></p> <p>Where: - <code>account_id</code>: Your AWS account ID - <code>service</code>: AWS service name (e.g., ec2, s3, rds) - <code>region</code>: AWS region (e.g., us-east-1, eu-west-1) - <code>method</code>: API method used (e.g., describe_instances, list_buckets) - <code>key</code>: Response key containing the resources</p>"},{"location":"usage/#processing-results","title":"Processing Results","text":"<p>You can process the JSON files using standard tools:</p> <pre><code># Count total files\nls inventory/*.json | wc -l\n\n# Find all EC2 instances\nfind inventory -name \"*-ec2-*-describe_instances-*.json\"\n\n# Search for specific resources\ngrep -l \"my-resource-name\" inventory/*.json\n</code></pre>"},{"location":"usage/#best-practices","title":"Best Practices","text":""},{"location":"usage/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Use appropriate worker count: Start with default (35) and adjust based on your needs</li> <li>Scan specific regions: If you only use certain regions, specify them explicitly</li> <li>Use SSD storage: Store results on fast storage for better I/O performance</li> </ol>"},{"location":"usage/#security-considerations","title":"Security Considerations","text":"<ol> <li>Use least privilege: Only grant necessary read permissions</li> <li>Secure credentials: Use IAM roles when possible, avoid hardcoded credentials</li> <li>Protect output: Ensure inventory files are stored securely</li> </ol>"},{"location":"usage/#operational-tips","title":"Operational Tips","text":"<ol> <li>Regular scans: Schedule regular scans to maintain up-to-date inventory</li> <li>Version control: Consider versioning your inventory results</li> <li>Monitoring: Monitor scan duration and success rates</li> <li>Cleanup: Regularly clean up old inventory files</li> </ol>"},{"location":"usage/#error-handling","title":"Error Handling","text":"<p>The scanner includes robust error handling:</p> <ul> <li>Network issues: Automatic retries with exponential backoff</li> <li>Permission errors: Graceful handling of insufficient permissions</li> <li>Rate limiting: Built-in retry logic for API throttling</li> <li>Service unavailability: Continues scanning other services if one fails</li> </ul>"},{"location":"usage/#common-error-scenarios","title":"Common Error Scenarios","text":"<ol> <li>Insufficient permissions: Check your IAM policies</li> <li>Network connectivity: Verify internet connection and AWS endpoint access</li> <li>Rate limiting: Reduce worker count or add delays</li> <li>Disk space: Ensure sufficient storage for results</li> </ol> <p>See the Troubleshooting guide for detailed error resolution.</p>"}]}